diff -U3 /home/longqimin/pg_regress_input/expected/boolean.out /home/longqimin/pg_regress_input/results/boolean.out
--- /home/longqimin/pg_regress_input/expected/boolean.out	2024-03-25 09:21:06.160601856 +0800
+++ /home/longqimin/pg_regress_input/results/boolean.out	2024-03-26 10:06:03.575704354 +0800
@@ -136,11 +136,7 @@
 (1 row)
 
 SELECT * FROM pg_input_error_info('junk', 'bool');
-                    message                    | detail | hint | sql_error_code 
------------------------------------------------+--------+------+----------------
- invalid input syntax for type boolean: "junk" |        |      | 22P02
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 -- and, or, not in qualifications
 SELECT bool 't' or bool 'f' AS true;
  true 
@@ -256,10 +252,7 @@
 SELECT BOOLTBL1.*
    FROM BOOLTBL1
    WHERE booleq(bool 'false', f1);
- f1 
-----
-(0 rows)
-
+ERROR:  function booleq does not exist
 INSERT INTO BOOLTBL1 (f1) VALUES (bool 'f');
 SELECT BOOLTBL1.*
    FROM BOOLTBL1
@@ -279,8 +272,6 @@
 INSERT INTO BOOLTBL2 (f1)
    VALUES (bool 'XXX');
 ERROR:  invalid input syntax for type boolean: "XXX"
-LINE 2:    VALUES (bool 'XXX');
-                        ^
 -- BOOLTBL2 should be full of false's at this point
 SELECT BOOLTBL2.* FROM BOOLTBL2;
  f1 
@@ -294,76 +285,20 @@
 SELECT BOOLTBL1.*, BOOLTBL2.*
    FROM BOOLTBL1, BOOLTBL2
    WHERE BOOLTBL2.f1 <> BOOLTBL1.f1;
- f1 | f1 
-----+----
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
-(12 rows)
-
+ERROR:  clapdb doesn't support join currently
 SELECT BOOLTBL1.*, BOOLTBL2.*
    FROM BOOLTBL1, BOOLTBL2
    WHERE boolne(BOOLTBL2.f1,BOOLTBL1.f1);
- f1 | f1 
-----+----
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
-(12 rows)
-
+ERROR:  function boolne does not exist
 SELECT BOOLTBL1.*, BOOLTBL2.*
    FROM BOOLTBL1, BOOLTBL2
    WHERE BOOLTBL2.f1 = BOOLTBL1.f1 and BOOLTBL1.f1 = bool 'false';
- f1 | f1 
-----+----
- f  | f
- f  | f
- f  | f
- f  | f
-(4 rows)
-
+ERROR:  clapdb doesn't support join currently
 SELECT BOOLTBL1.*, BOOLTBL2.*
    FROM BOOLTBL1, BOOLTBL2
    WHERE BOOLTBL2.f1 = BOOLTBL1.f1 or BOOLTBL1.f1 = bool 'true'
    ORDER BY BOOLTBL1.f1, BOOLTBL2.f1;
- f1 | f1 
-----+----
- f  | f
- f  | f
- f  | f
- f  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
- t  | f
-(16 rows)
-
+ERROR:  clapdb doesn't support join currently
 --
 -- SQL syntax
 -- Try all combinations to ensure that we get nothing when we expect nothing
@@ -548,20 +483,20 @@
 
 -- Casts
 SELECT 0::boolean;
- bool 
-------
+ ?column? 
+----------
  f
 (1 row)
 
 SELECT 1::boolean;
- bool 
-------
+ ?column? 
+----------
  t
 (1 row)
 
 SELECT 2::boolean;
- bool 
-------
+ ?column? 
+----------
  t
 (1 row)
 
@@ -572,6 +507,10 @@
 --  - thomas 1997-11-30
 --
 DROP TABLE  BOOLTBL1;
+ERROR:  only support select and create table statement
 DROP TABLE  BOOLTBL2;
+ERROR:  only support select and create table statement
 DROP TABLE  BOOLTBL3;
+ERROR:  only support select and create table statement
 DROP TABLE  BOOLTBL4;
+ERROR:  only support select and create table statement
diff -U3 /home/longqimin/pg_regress_input/expected/int2.out /home/longqimin/pg_regress_input/results/int2.out
--- /home/longqimin/pg_regress_input/expected/int2.out	2024-03-22 14:23:59.097610627 +0800
+++ /home/longqimin/pg_regress_input/results/int2.out	2024-03-26 10:06:06.918713435 +0800
@@ -4,21 +4,21 @@
 -- int2_tbl was already created and filled in test_setup.sql.
 -- Here we just try to insert bad values.
 INSERT INTO INT2_TBL(f1) VALUES ('34.5');
-ERROR:  invalid input syntax for type smallint: "34.5"
+ERROR:  invalid input syntax for type integer: "34.5"
 INSERT INTO INT2_TBL(f1) VALUES ('100000');
-ERROR:  value "100000" is out of range for type smallint
+ERROR:  value "100000" is out of range for type integer
 INSERT INTO INT2_TBL(f1) VALUES ('asdf');
-ERROR:  invalid input syntax for type smallint: "asdf"
+ERROR:  invalid input syntax for type integer: "asdf"
 INSERT INTO INT2_TBL(f1) VALUES ('    ');
-ERROR:  invalid input syntax for type smallint: "    "
+ERROR:  invalid input syntax for type integer: "    "
 INSERT INTO INT2_TBL(f1) VALUES ('- 1234');
-ERROR:  invalid input syntax for type smallint: "- 1234"
+ERROR:  invalid input syntax for type integer: "- 1234"
 INSERT INTO INT2_TBL(f1) VALUES ('4 444');
-ERROR:  invalid input syntax for type smallint: "4 444"
+ERROR:  invalid input syntax for type integer: "4 444"
 INSERT INTO INT2_TBL(f1) VALUES ('123 dt');
-ERROR:  invalid input syntax for type smallint: "123 dt"
+ERROR:  invalid input syntax for type integer: "123 dt"
 INSERT INTO INT2_TBL(f1) VALUES ('');
-ERROR:  invalid input syntax for type smallint: ""
+ERROR:  invalid input syntax for type integer: ""
 SELECT * FROM INT2_TBL order by 1;
    f1   
 --------
@@ -49,34 +49,38 @@
 (1 row)
 
 SELECT * FROM pg_input_error_info('50000', 'int2');
-                     message                     | detail | hint | sql_error_code 
--------------------------------------------------+--------+------+----------------
- value "50000" is out of range for type smallint |        |      | 22003
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 -- While we're here, check int2vector as well
 SELECT pg_input_is_valid(' 1 3  5 ', 'int2vector');
  pg_input_is_valid 
 -------------------
- t
+ f
 (1 row)
 
 SELECT * FROM pg_input_error_info('1 asdf', 'int2vector');
-                    message                     | detail | hint | sql_error_code 
-------------------------------------------------+--------+------+----------------
- invalid input syntax for type smallint: "asdf" |        |      | 22P02
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 SELECT * FROM pg_input_error_info('50000', 'int2vector');
-                     message                     | detail | hint | sql_error_code 
--------------------------------------------------+--------+------+----------------
- value "50000" is out of range for type smallint |        |      | 22003
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 SELECT * FROM INT2_TBL AS f(a, b);
-ERROR:  table "f" has 1 columns available but 2 columns specified
+   f1   
+--------
+      0
+   1234
+  -1234
+  32767
+ -32767
+(5 rows)
+
 SELECT * FROM (TABLE int2_tbl) AS s (a, b);
-ERROR:  table "s" has 1 columns available but 2 columns specified
+   f1   
+--------
+      0
+   1234
+  -1234
+  32767
+ -32767
+(5 rows)
+
 SELECT i.* FROM INT2_TBL i WHERE i.f1 <> int2 '0' order by 1;
    f1   
 --------
@@ -184,7 +188,15 @@
 (3 rows)
 
 SELECT i.f1, i.f1 * int2 '2' AS x FROM INT2_TBL i order by 1;
-ERROR:  smallint out of range
+   f1   |   x    
+--------+--------
+ -32767 | -65534
+  -1234 |  -2468
+      0 |      0
+   1234 |   2468
+  32767 |  65534
+(5 rows)
+
 SELECT i.f1, i.f1 * int2 '2' AS x FROM INT2_TBL i
 WHERE abs(f1) < 16384 order by 1;
   f1   |   x   
@@ -205,7 +217,15 @@
 (5 rows)
 
 SELECT i.f1, i.f1 + int2 '2' AS x FROM INT2_TBL i order by 1;
-ERROR:  smallint out of range
+   f1   |   x    
+--------+--------
+ -32767 | -32765
+  -1234 |  -1232
+      0 |      2
+   1234 |   1236
+  32767 |  32769
+(5 rows)
+
 SELECT i.f1, i.f1 + int2 '2' AS x FROM INT2_TBL i
 WHERE f1 < 32766 order by 1;
    f1   |   x    
@@ -227,7 +247,15 @@
 (5 rows)
 
 SELECT i.f1, i.f1 - int2 '2' AS x FROM INT2_TBL i order by 1;
-ERROR:  smallint out of range
+   f1   |   x    
+--------+--------
+ -32767 | -32769
+  -1234 |  -1236
+      0 |     -2
+   1234 |   1232
+  32767 |  32765
+(5 rows)
+
 SELECT i.f1, i.f1 - int2 '2' AS x FROM INT2_TBL i
 WHERE f1 > -32767 order by 1;
   f1   |   x   
@@ -270,22 +298,22 @@
 
 -- corner cases
 SELECT (-1::int2<<15)::text;
-  text  
---------
- -32768
-(1 row)
-
+ERROR:  binary_optr only support binary optr = [optr_str=<<]
 SELECT ((-1::int2<<15)+1::int2)::text;
-  text  
---------
- -32767
-(1 row)
-
+ERROR:  binary_optr only support binary optr = [optr_str=<<]
 -- check sane handling of INT16_MIN overflow cases
 SELECT (-32768)::int2 * (-1)::int2;
-ERROR:  smallint out of range
+ ?column? 
+----------
+    32768
+(1 row)
+
 SELECT (-32768)::int2 / (-1)::int2;
-ERROR:  smallint out of range
+ ?column? 
+----------
+    32768
+(1 row)
+
 SELECT (-32768)::int2 % (-1)::int2;
  ?column? 
 ----------
@@ -301,17 +329,7 @@
              (0.5::float8),
              (1.5::float8),
              (2.5::float8)) t(x);
-  x   | int2_value 
-------+------------
- -2.5 |         -2
- -1.5 |         -2
- -0.5 |          0
-    0 |          0
-  0.5 |          0
-  1.5 |          2
-  2.5 |          2
-(7 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- check rounding when casting from numeric
 SELECT x, x::int2 AS int2_value
 FROM (VALUES (-2.5::numeric),
@@ -321,126 +339,96 @@
              (0.5::numeric),
              (1.5::numeric),
              (2.5::numeric)) t(x);
-  x   | int2_value 
-------+------------
- -2.5 |         -3
- -1.5 |         -2
- -0.5 |         -1
-  0.0 |          0
-  0.5 |          1
-  1.5 |          2
-  2.5 |          3
-(7 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- non-decimal literals
 SELECT int2 '0b100101';
- int2 
-------
-   37
+ ?column? 
+----------
+       37
 (1 row)
 
 SELECT int2 '0o273';
- int2 
-------
-  187
+ ?column? 
+----------
+      187
 (1 row)
 
 SELECT int2 '0x42F';
- int2 
-------
- 1071
+ ?column? 
+----------
+     1071
 (1 row)
 
 SELECT int2 '0b';
-ERROR:  invalid input syntax for type smallint: "0b"
+ERROR:  invalid input syntax for type integer: "0b"
 SELECT int2 '0o';
-ERROR:  invalid input syntax for type smallint: "0o"
+ERROR:  invalid input syntax for type integer: "0o"
 SELECT int2 '0x';
-ERROR:  invalid input syntax for type smallint: "0x"
+ERROR:  invalid input syntax for type integer: "0x"
 -- cases near overflow
 SELECT int2 '0b111111111111111';
- int2  
--------
- 32767
+ ?column? 
+----------
+    32767
 (1 row)
 
 SELECT int2 '0b1000000000000000';
-ERROR:  value "0b1000000000000000" is out of range for type smallint
+ERROR:  value "0b1000000000000000" is out of range for type integer
 SELECT int2 '0o77777';
- int2  
--------
- 32767
+ ?column? 
+----------
+    32767
 (1 row)
 
 SELECT int2 '0o100000';
-ERROR:  value "0o100000" is out of range for type smallint
+ERROR:  value "0o100000" is out of range for type integer
 SELECT int2 '0x7FFF';
- int2  
--------
- 32767
+ ?column? 
+----------
+    32767
 (1 row)
 
 SELECT int2 '0x8000';
-ERROR:  value "0x8000" is out of range for type smallint
+ERROR:  value "0x8000" is out of range for type integer
 SELECT int2 '-0b1000000000000000';
-  int2  
---------
- -32768
+ ?column? 
+----------
+   -32768
 (1 row)
 
 SELECT int2 '-0b1000000000000001';
-ERROR:  value "-0b1000000000000001" is out of range for type smallint
+ERROR:  invalid input syntax for type integer: "-0b1000000000000001"
 SELECT int2 '-0o100000';
-  int2  
---------
- -32768
+ ?column? 
+----------
+   -32768
 (1 row)
 
 SELECT int2 '-0o100001';
-ERROR:  value "-0o100001" is out of range for type smallint
+ERROR:  invalid input syntax for type integer: "-0o100001"
 SELECT int2 '-0x8000';
-  int2  
---------
- -32768
+ ?column? 
+----------
+   -32768
 (1 row)
 
 SELECT int2 '-0x8001';
-ERROR:  value "-0x8001" is out of range for type smallint
+ERROR:  invalid input syntax for type integer: "-0x8001"
 -- underscores
 SELECT int2 '1_000';
- int2 
-------
- 1000
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "1_000"
 SELECT int2 '1_2_3';
- int2 
-------
-  123
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "1_2_3"
 SELECT int2 '0xE_FF';
- int2 
-------
- 3839
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0xE_FF"
 SELECT int2 '0o2_73';
- int2 
-------
-  187
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0o2_73"
 SELECT int2 '0b_10_0101';
- int2 
-------
-   37
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0b_10_0101"
 -- error cases
 SELECT int2 '_100';
-ERROR:  invalid input syntax for type smallint: "_100"
+ERROR:  invalid input syntax for type integer: "_100"
 SELECT int2 '100_';
-ERROR:  invalid input syntax for type smallint: "100_"
+ERROR:  invalid input syntax for type integer: "100_"
 SELECT int2 '10__000';
-ERROR:  invalid input syntax for type smallint: "10__000"
+ERROR:  invalid input syntax for type integer: "10__000"
diff -U3 /home/longqimin/pg_regress_input/expected/int4.out /home/longqimin/pg_regress_input/results/int4.out
--- /home/longqimin/pg_regress_input/expected/int4.out	2024-03-11 11:46:21.656870844 +0800
+++ /home/longqimin/pg_regress_input/results/int4.out	2024-03-26 10:06:10.866724161 +0800
@@ -49,11 +49,7 @@
 (1 row)
 
 SELECT * FROM pg_input_error_info('1000000000000', 'int4');
-                        message                         | detail | hint | sql_error_code 
---------------------------------------------------------+--------+------+----------------
- value "1000000000000" is out of range for type integer |        |      | 22003
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 SELECT i.* FROM INT4_TBL i WHERE i.f1 <> int2 '0' order by 1;
      f1      
 -------------
@@ -161,7 +157,15 @@
 (3 rows)
 
 SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i;
-ERROR:  integer out of range
+     f1      |      x      
+-------------+-------------
+           0 |           0
+      123456 |      246912
+     -123456 |     -246912
+  2147483647 |  4294967294
+ -2147483647 | -4294967294
+(5 rows)
+
 SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i
 WHERE abs(f1) < 1073741824 order by 1;
    f1    |    x    
@@ -172,7 +176,15 @@
 (3 rows)
 
 SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i;
-ERROR:  integer out of range
+     f1      |      x      
+-------------+-------------
+           0 |           0
+      123456 |      246912
+     -123456 |     -246912
+  2147483647 |  4294967294
+ -2147483647 | -4294967294
+(5 rows)
+
 SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i
 WHERE abs(f1) < 1073741824 order by 1;
    f1    |    x    
@@ -183,7 +195,15 @@
 (3 rows)
 
 SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i;
-ERROR:  integer out of range
+     f1      |      x      
+-------------+-------------
+           0 |           2
+      123456 |      123458
+     -123456 |     -123454
+  2147483647 |  2147483649
+ -2147483647 | -2147483645
+(5 rows)
+
 SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i
 WHERE f1 < 2147483646 order by 1;
      f1      |      x      
@@ -195,7 +215,15 @@
 (4 rows)
 
 SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i;
-ERROR:  integer out of range
+     f1      |      x      
+-------------+-------------
+           0 |           2
+      123456 |      123458
+     -123456 |     -123454
+  2147483647 |  2147483649
+ -2147483647 | -2147483645
+(5 rows)
+
 SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i
 WHERE f1 < 2147483646 order by 1;
      f1      |      x      
@@ -207,7 +235,15 @@
 (4 rows)
 
 SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i;
-ERROR:  integer out of range
+     f1      |      x      
+-------------+-------------
+           0 |          -2
+      123456 |      123454
+     -123456 |     -123458
+  2147483647 |  2147483645
+ -2147483647 | -2147483649
+(5 rows)
+
 SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i
 WHERE f1 > -2147483647 order by 1;
      f1     |     x      
@@ -219,7 +255,15 @@
 (4 rows)
 
 SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i;
-ERROR:  integer out of range
+     f1      |      x      
+-------------+-------------
+           0 |          -2
+      123456 |      123454
+     -123456 |     -123458
+  2147483647 |  2147483645
+ -2147483647 | -2147483649
+(5 rows)
+
 SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i
 WHERE f1 > -2147483647 order by 1;
      f1     |     x      
@@ -322,22 +366,22 @@
 
 -- corner case
 SELECT (-1::int4<<31)::text;
-    text     
--------------
- -2147483648
-(1 row)
-
+ERROR:  binary_optr only support binary optr = [optr_str=<<]
 SELECT ((-1::int4<<31)+1)::text;
-    text     
--------------
- -2147483647
-(1 row)
-
+ERROR:  binary_optr only support binary optr = [optr_str=<<]
 -- check sane handling of INT_MIN overflow cases
 SELECT (-2147483648)::int4 * (-1)::int4;
-ERROR:  integer out of range
+  ?column?  
+------------
+ 2147483648
+(1 row)
+
 SELECT (-2147483648)::int4 / (-1)::int4;
-ERROR:  integer out of range
+  ?column?  
+------------
+ 2147483648
+(1 row)
+
 SELECT (-2147483648)::int4 % (-1)::int4;
  ?column? 
 ----------
@@ -345,9 +389,17 @@
 (1 row)
 
 SELECT (-2147483648)::int4 * (-1)::int2;
-ERROR:  integer out of range
+  ?column?  
+------------
+ 2147483648
+(1 row)
+
 SELECT (-2147483648)::int4 / (-1)::int2;
-ERROR:  integer out of range
+  ?column?  
+------------
+ 2147483648
+(1 row)
+
 SELECT (-2147483648)::int4 % (-1)::int2;
  ?column? 
 ----------
@@ -363,17 +415,7 @@
              (0.5::float8),
              (1.5::float8),
              (2.5::float8)) t(x);
-  x   | int4_value 
-------+------------
- -2.5 |         -2
- -1.5 |         -2
- -0.5 |          0
-    0 |          0
-  0.5 |          0
-  1.5 |          2
-  2.5 |          2
-(7 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- check rounding when casting from numeric
 SELECT x, x::int4 AS int4_value
 FROM (VALUES (-2.5::numeric),
@@ -383,17 +425,7 @@
              (0.5::numeric),
              (1.5::numeric),
              (2.5::numeric)) t(x);
-  x   | int4_value 
-------+------------
- -2.5 |         -3
- -1.5 |         -2
- -0.5 |         -1
-  0.0 |          0
-  0.5 |          1
-  1.5 |          2
-  2.5 |          3
-(7 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- test gcd()
 SELECT a, b, gcd(a, b), gcd(a, -b), gcd(b, a), gcd(-b, a)
 FROM (VALUES (0::int4, 0::int4),
@@ -403,21 +435,11 @@
              ((-2147483648)::int4, 1::int4),
              ((-2147483648)::int4, 2147483647::int4),
              ((-2147483648)::int4, 1073741824::int4)) AS v(a, b);
-      a      |     b      |    gcd     |    gcd     |    gcd     |    gcd     
--------------+------------+------------+------------+------------+------------
-           0 |          0 |          0 |          0 |          0 |          0
-           0 |    6410818 |    6410818 |    6410818 |    6410818 |    6410818
-    61866666 |    6410818 |       1466 |       1466 |       1466 |       1466
-   -61866666 |    6410818 |       1466 |       1466 |       1466 |       1466
- -2147483648 |          1 |          1 |          1 |          1 |          1
- -2147483648 | 2147483647 |          1 |          1 |          1 |          1
- -2147483648 | 1073741824 | 1073741824 | 1073741824 | 1073741824 | 1073741824
-(7 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT gcd((-2147483648)::int4, 0::int4); -- overflow
-ERROR:  integer out of range
+ERROR:  function gcd does not exist
 SELECT gcd((-2147483648)::int4, (-2147483648)::int4); -- overflow
-ERROR:  integer out of range
+ERROR:  function gcd does not exist
 -- test lcm()
 SELECT a, b, lcm(a, b), lcm(a, -b), lcm(b, a), lcm(-b, a)
 FROM (VALUES (0::int4, 0::int4),
@@ -426,37 +448,28 @@
              (330::int4, 462::int4),
              (-330::int4, 462::int4),
              ((-2147483648)::int4, 0::int4)) AS v(a, b);
-      a      |  b  | lcm  | lcm  | lcm  | lcm  
--------------+-----+------+------+------+------
-           0 |   0 |    0 |    0 |    0 |    0
-           0 |  42 |    0 |    0 |    0 |    0
-          42 |  42 |   42 |   42 |   42 |   42
-         330 | 462 | 2310 | 2310 | 2310 | 2310
-        -330 | 462 | 2310 | 2310 | 2310 | 2310
- -2147483648 |   0 |    0 |    0 |    0 |    0
-(6 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT lcm((-2147483648)::int4, 1::int4); -- overflow
-ERROR:  integer out of range
+ERROR:  function lcm does not exist
 SELECT lcm(2147483647::int4, 2147483646::int4); -- overflow
-ERROR:  integer out of range
+ERROR:  function lcm does not exist
 -- non-decimal literals
 SELECT int4 '0b100101';
- int4 
-------
-   37
+ ?column? 
+----------
+       37
 (1 row)
 
 SELECT int4 '0o273';
- int4 
-------
-  187
+ ?column? 
+----------
+      187
 (1 row)
 
 SELECT int4 '0x42F';
- int4 
-------
- 1071
+ ?column? 
+----------
+     1071
 (1 row)
 
 SELECT int4 '0b';
@@ -467,7 +480,7 @@
 ERROR:  invalid input syntax for type integer: "0x"
 -- cases near overflow
 SELECT int4 '0b1111111111111111111111111111111';
-    int4    
+  ?column?  
 ------------
  2147483647
 (1 row)
@@ -475,7 +488,7 @@
 SELECT int4 '0b10000000000000000000000000000000';
 ERROR:  value "0b10000000000000000000000000000000" is out of range for type integer
 SELECT int4 '0o17777777777';
-    int4    
+  ?column?  
 ------------
  2147483647
 (1 row)
@@ -483,7 +496,7 @@
 SELECT int4 '0o20000000000';
 ERROR:  value "0o20000000000" is out of range for type integer
 SELECT int4 '0x7FFFFFFF';
-    int4    
+  ?column?  
 ------------
  2147483647
 (1 row)
@@ -491,60 +504,40 @@
 SELECT int4 '0x80000000';
 ERROR:  value "0x80000000" is out of range for type integer
 SELECT int4 '-0b10000000000000000000000000000000';
-    int4     
+  ?column?   
 -------------
  -2147483648
 (1 row)
 
 SELECT int4 '-0b10000000000000000000000000000001';
-ERROR:  value "-0b10000000000000000000000000000001" is out of range for type integer
+ERROR:  invalid input syntax for type integer: "-0b10000000000000000000000000000001"
 SELECT int4 '-0o20000000000';
-    int4     
+  ?column?   
 -------------
  -2147483648
 (1 row)
 
 SELECT int4 '-0o20000000001';
-ERROR:  value "-0o20000000001" is out of range for type integer
+ERROR:  invalid input syntax for type integer: "-0o20000000001"
 SELECT int4 '-0x80000000';
-    int4     
+  ?column?   
 -------------
  -2147483648
 (1 row)
 
 SELECT int4 '-0x80000001';
-ERROR:  value "-0x80000001" is out of range for type integer
+ERROR:  invalid input syntax for type integer: "-0x80000001"
 -- underscores
 SELECT int4 '1_000_000';
-  int4   
----------
- 1000000
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "1_000_000"
 SELECT int4 '1_2_3';
- int4 
-------
-  123
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "1_2_3"
 SELECT int4 '0x1EEE_FFFF';
-   int4    
------------
- 518979583
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0x1EEE_FFFF"
 SELECT int4 '0o2_73';
- int4 
-------
-  187
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0o2_73"
 SELECT int4 '0b_10_0101';
- int4 
-------
-   37
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0b_10_0101"
 -- error cases
 SELECT int4 '_100';
 ERROR:  invalid input syntax for type integer: "_100"
diff -U3 /home/longqimin/pg_regress_input/expected/int8.out /home/longqimin/pg_regress_input/results/int8.out
--- /home/longqimin/pg_regress_input/expected/int8.out	2024-03-11 11:46:21.657870845 +0800
+++ /home/longqimin/pg_regress_input/results/int8.out	2024-03-26 10:06:20.996751679 +0800
@@ -5,19 +5,19 @@
 -- int8_tbl was already created and filled in test_setup.sql.
 -- Here we just try to insert bad values.
 INSERT INTO INT8_TBL(q1) VALUES ('      ');
-ERROR:  invalid input syntax for type bigint: "      "
+ERROR:  invalid input syntax for type integer: "      "
 INSERT INTO INT8_TBL(q1) VALUES ('xxx');
-ERROR:  invalid input syntax for type bigint: "xxx"
+ERROR:  invalid input syntax for type integer: "xxx"
 INSERT INTO INT8_TBL(q1) VALUES ('3908203590239580293850293850329485');
-ERROR:  value "3908203590239580293850293850329485" is out of range for type bigint
+ERROR:  value "3908203590239580293850293850329485" is out of range for type integer
 INSERT INTO INT8_TBL(q1) VALUES ('-1204982019841029840928340329840934');
-ERROR:  value "-1204982019841029840928340329840934" is out of range for type bigint
+ERROR:  value "-1204982019841029840928340329840934" is out of range for type integer
 INSERT INTO INT8_TBL(q1) VALUES ('- 123');
-ERROR:  invalid input syntax for type bigint: "- 123"
+ERROR:  invalid input syntax for type integer: "- 123"
 INSERT INTO INT8_TBL(q1) VALUES ('  345     5');
-ERROR:  invalid input syntax for type bigint: "  345     5"
+ERROR:  invalid input syntax for type integer: "  345     5"
 INSERT INTO INT8_TBL(q1) VALUES ('');
-ERROR:  invalid input syntax for type bigint: ""
+ERROR:  invalid input syntax for type integer: ""
 SELECT * FROM INT8_TBL order by 1;
         q1        |        q2         
 ------------------+-------------------
@@ -48,11 +48,7 @@
 (1 row)
 
 SELECT * FROM pg_input_error_info('10000000000000000000', 'int8');
-                           message                            | detail | hint | sql_error_code 
---------------------------------------------------------------+--------+------+----------------
- value "10000000000000000000" is out of range for type bigint |        |      | 22003
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 -- int8/int8 cmp
 SELECT * FROM INT8_TBL WHERE q2 = 4567890123456789 order by 1;
         q1        |        q2        
@@ -314,7 +310,15 @@
 (5 rows)
 
 SELECT q1, q2, q1 * q2 AS multiply FROM INT8_TBL order by 1;
-ERROR:  bigint out of range
+        q1        |        q2         |       multiply       
+------------------+-------------------+----------------------
+              123 |               456 |                56088
+              123 |  4567890123456789 |   561850485185185047
+ 4567890123456789 |               123 |   561850485185185047
+ 4567890123456789 |  4567890123456789 |  4868582358072306617
+ 4567890123456789 | -4567890123456789 | -4868582358072306617
+(5 rows)
+
 SELECT q1, q2, q1 * q2 AS multiply FROM INT8_TBL
  WHERE q1 < 1000 or (q2 > 0 and q2 < 1000);
         q1        |        q2        |      multiply      
@@ -335,25 +339,9 @@
 (5 rows)
 
 SELECT q1, float8(q1) FROM INT8_TBL order by 1;
-        q1        |        float8         
-------------------+-----------------------
-              123 |                   123
-              123 |                   123
- 4567890123456789 | 4.567890123456789e+15
- 4567890123456789 | 4.567890123456789e+15
- 4567890123456789 | 4.567890123456789e+15
-(5 rows)
-
+ERROR:  function float8 does not exist
 SELECT q2, float8(q2) FROM INT8_TBL order by 1;
-        q2         |         float8         
--------------------+------------------------
- -4567890123456789 | -4.567890123456789e+15
-               123 |                    123
-               456 |                    456
-  4567890123456789 |  4.567890123456789e+15
-  4567890123456789 |  4.567890123456789e+15
-(5 rows)
-
+ERROR:  function float8 does not exist
 SELECT 37 + q1 AS plus4 FROM INT8_TBL order by 1;
       plus4       
 ------------------
@@ -464,195 +452,59 @@
 --
 SELECT to_char(q1, '9G999G999G999G999G999'), to_char(q2, '9,999,999,999,999,999')
 	FROM INT8_TBL order by 1;
-        to_char         |        to_char         
-------------------------+------------------------
-                    123 |                    456
-                    123 |  4,567,890,123,456,789
-  4,567,890,123,456,789 |                    123
-  4,567,890,123,456,789 |  4,567,890,123,456,789
-  4,567,890,123,456,789 | -4,567,890,123,456,789
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q1, '9G999G999G999G999G999D999G999'), to_char(q2, '9,999,999,999,999,999.999,999')
 	FROM INT8_TBL order by 1;
-            to_char             |            to_char             
---------------------------------+--------------------------------
-                    123.000,000 |                    456.000,000
-                    123.000,000 |  4,567,890,123,456,789.000,000
-  4,567,890,123,456,789.000,000 |                    123.000,000
-  4,567,890,123,456,789.000,000 |  4,567,890,123,456,789.000,000
-  4,567,890,123,456,789.000,000 | -4,567,890,123,456,789.000,000
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char( (q1 * -1), '9999999999999999PR'), to_char( (q2 * -1), '9999999999999999.999PR')
 	FROM INT8_TBL order by 1;
-      to_char       |        to_char         
---------------------+------------------------
-              <123> |              <456.000>
-              <123> | <4567890123456789.000>
- <4567890123456789> |              <123.000>
- <4567890123456789> | <4567890123456789.000>
- <4567890123456789> |  4567890123456789.000 
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char( (q1 * -1), '9999999999999999S'), to_char( (q2 * -1), 'S9999999999999999')
 	FROM INT8_TBL order by 1;
-      to_char      |      to_char      
--------------------+-------------------
-              123- |              -456
-              123- | -4567890123456789
- 4567890123456789- |              -123
- 4567890123456789- | -4567890123456789
- 4567890123456789- | +4567890123456789
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'MI9999999999999999')     FROM INT8_TBL order by 1;
-      to_char      
--------------------
-               123
-               456
-  4567890123456789
-  4567890123456789
- -4567890123456789
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'FMS9999999999999999')    FROM INT8_TBL order by 1;
-      to_char      
--------------------
- +123
- +456
- +4567890123456789
- +4567890123456789
- -4567890123456789
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'FM9999999999999999THPR') FROM INT8_TBL order by 1;
-      to_char       
---------------------
- 123RD
- <4567890123456789>
- 4567890123456789TH
- 4567890123456789TH
- 456TH
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'SG9999999999999999th')   FROM INT8_TBL order by 1;
-       to_char       
----------------------
- +             123rd
- -4567890123456789
- +4567890123456789th
- +4567890123456789th
- +             456th
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, '0999999999999999')       FROM INT8_TBL order by 1;
-      to_char      
--------------------
-  0000000000000123
-  0000000000000456
-  4567890123456789
-  4567890123456789
- -4567890123456789
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'S0999999999999999')      FROM INT8_TBL order by 1;
-      to_char      
--------------------
- +0000000000000123
- +0000000000000456
- +4567890123456789
- +4567890123456789
- -4567890123456789
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'FM0999999999999999')     FROM INT8_TBL order by 1;
-      to_char      
--------------------
- 0000000000000123
- 0000000000000456
- -4567890123456789
- 4567890123456789
- 4567890123456789
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'FM9999999999999999.000') FROM INT8_TBL order by 1;
-        to_char        
------------------------
- 123.000
- 456.000
- -4567890123456789.000
- 4567890123456789.000
- 4567890123456789.000
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'L9999999999999999.000')  FROM INT8_TBL order by 1;
-        to_char         
-------------------------
-                123.000
-                456.000
-   4567890123456789.000
-   4567890123456789.000
-  -4567890123456789.000
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'FM9999999999999999.999') FROM INT8_TBL order by 1;
-      to_char       
---------------------
- 123.
- 456.
- -4567890123456789.
- 4567890123456789.
- 4567890123456789.
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, 'S 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9') FROM INT8_TBL order by 1;
-                  to_char                  
--------------------------------------------
-                            +1 2 3 . 0 0 0
-                            +4 5 6 . 0 0 0
-  +4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 . 0 0 0
-  +4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 . 0 0 0
-  -4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 . 0 0 0
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, E'99999 "text" 9999 "9999" 999 "\\"text between quote marks\\"" 9999') FROM INT8_TBL order by 1;
-                          to_char                          
------------------------------------------------------------
-  45678 text 9012 9999 345 "text between quote marks" 6789
-  45678 text 9012 9999 345 "text between quote marks" 6789
- -45678 text 9012 9999 345 "text between quote marks" 6789
-       text      9999     "text between quote marks"   123
-       text      9999     "text between quote marks"   456
-(5 rows)
-
+ERROR:  function to_char does not exist
 SELECT to_char(q2, '999999SG9999999999')     FROM INT8_TBL order by 1;
-      to_char      
--------------------
-       +       123
-       +       456
- 456789+0123456789
- 456789+0123456789
- 456789-0123456789
-(5 rows)
-
+ERROR:  function to_char does not exist
 -- check min/max values and overflow behavior
 select '-9223372036854775808'::int8;
-         int8         
+       ?column?       
 ----------------------
  -9223372036854775808
 (1 row)
 
 select '-9223372036854775809'::int8;
-ERROR:  value "-9223372036854775809" is out of range for type bigint
+ERROR:  value "-9223372036854775809" is out of range for type integer
 select '9223372036854775807'::int8;
-        int8         
+      ?column?       
 ---------------------
  9223372036854775807
 (1 row)
 
 select '9223372036854775808'::int8;
-ERROR:  value "9223372036854775808" is out of range for type bigint
+ERROR:  value "9223372036854775808" is out of range for type integer
 select -('-9223372036854775807'::int8);
       ?column?       
 ---------------------
@@ -660,53 +512,129 @@
 (1 row)
 
 select -('-9223372036854775808'::int8);
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775808
+(1 row)
+
 select 0::int8 - '-9223372036854775808'::int8;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775808
+(1 row)
+
 select '9223372036854775800'::int8 + '9223372036854775800'::int8;
-ERROR:  bigint out of range
+       ?column?       
+----------------------
+ 18446744073709551600
+(1 row)
+
 select '-9223372036854775800'::int8 + '-9223372036854775800'::int8;
-ERROR:  bigint out of range
+ ?column? 
+----------
+       16
+(1 row)
+
 select '9223372036854775800'::int8 - '-9223372036854775800'::int8;
-ERROR:  bigint out of range
+       ?column?       
+----------------------
+ 18446744073709551600
+(1 row)
+
 select '-9223372036854775800'::int8 - '9223372036854775800'::int8;
-ERROR:  bigint out of range
+ ?column? 
+----------
+       16
+(1 row)
+
 select '9223372036854775800'::int8 * '9223372036854775800'::int8;
-ERROR:  bigint out of range
+ ?column? 
+----------
+       64
+(1 row)
+
 select '9223372036854775800'::int8 / '0'::int8;
-ERROR:  division by zero
+ERROR:  div zero [func=func_10863380729723559177]
 select '9223372036854775800'::int8 % '0'::int8;
-ERROR:  division by zero
+ERROR:  div zero [func=func_14579211216900041302]
 select abs('-9223372036854775808'::int8);
-ERROR:  bigint out of range
+ERROR:  out of range
 select '9223372036854775800'::int8 + '100'::int4;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775900
+(1 row)
+
 select '-9223372036854775800'::int8 - '100'::int4;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775716
+(1 row)
+
 select '9223372036854775800'::int8 * '100'::int4;
-ERROR:  bigint out of range
+ ?column? 
+----------
+     -800
+(1 row)
+
 select '100'::int4 + '9223372036854775800'::int8;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775900
+(1 row)
+
 select '-100'::int4 - '9223372036854775800'::int8;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775716
+(1 row)
+
 select '100'::int4 * '9223372036854775800'::int8;
-ERROR:  bigint out of range
+ ?column? 
+----------
+     -800
+(1 row)
+
 select '9223372036854775800'::int8 + '100'::int2;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775900
+(1 row)
+
 select '-9223372036854775800'::int8 - '100'::int2;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775716
+(1 row)
+
 select '9223372036854775800'::int8 * '100'::int2;
-ERROR:  bigint out of range
+ ?column? 
+----------
+     -800
+(1 row)
+
 select '-9223372036854775808'::int8 / '0'::int2;
-ERROR:  division by zero
+ERROR:  div zero [func=func_10863380729723559177]
 select '100'::int2 + '9223372036854775800'::int8;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775900
+(1 row)
+
 select '-100'::int2 - '9223372036854775800'::int8;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775716
+(1 row)
+
 select '100'::int2 * '9223372036854775800'::int8;
-ERROR:  bigint out of range
+ ?column? 
+----------
+     -800
+(1 row)
+
 select '100'::int2 / '0'::int8;
-ERROR:  division by zero
+ERROR:  div zero [func=func_9060753810053611181]
 SELECT CAST(q1 AS int4) FROM int8_tbl WHERE q2 = 456;
  q1  
 -----
@@ -714,7 +642,14 @@
 (1 row)
 
 SELECT CAST(q1 AS int4) FROM int8_tbl WHERE q2 <> 456;
-ERROR:  integer out of range
+     q1     
+------------
+        123
+ -869367531
+ -869367531
+ -869367531
+(4 rows)
+
 SELECT CAST(q1 AS int2) FROM int8_tbl WHERE q2 = 456;
  q1  
 -----
@@ -722,108 +657,72 @@
 (1 row)
 
 SELECT CAST(q1 AS int2) FROM int8_tbl WHERE q2 <> 456;
-ERROR:  smallint out of range
+   q1   
+--------
+    123
+ -32491
+ -32491
+ -32491
+(4 rows)
+
 SELECT CAST('42'::int2 AS int8), CAST('-37'::int2 AS int8);
- int8 | int8 
-------+------
-   42 |  -37
+ ?column? | ?column? 
+----------+----------
+       42 |      -37
 (1 row)
 
 SELECT CAST(q1 AS float4), CAST(q2 AS float8) FROM INT8_TBL order by 1;
-     q1      |           q2           
--------------+------------------------
-         123 |                    456
-         123 |  4.567890123456789e+15
- 4.56789e+15 |                    123
- 4.56789e+15 |  4.567890123456789e+15
- 4.56789e+15 | -4.567890123456789e+15
+        q1        |        q2         
+------------------+-------------------
+              123 |               456
+              123 |  4567890123456789
+ 4567890000000000 |               123
+ 4567890000000000 |  4567890123456789
+ 4567890000000000 | -4567890123456789
 (5 rows)
 
 SELECT CAST('36854775807.0'::float4 AS int8);
-    int8     
+  ?column?   
 -------------
  36854775808
 (1 row)
 
 SELECT CAST('922337203685477580700.0'::float8 AS int8);
-ERROR:  bigint out of range
+ERROR:  long out of range
 SELECT CAST(q1 AS oid) FROM INT8_TBL order by 1;
-ERROR:  OID out of range
+ERROR:  not implemented type_cast case [to=oid]
 SELECT oid::int8 FROM pg_class WHERE relname = 'pg_class';
- oid  
-------
- 1259
-(1 row)
-
+ERROR:  relation "public.pg_class" does not exist
 -- bit operations
 SELECT q1, q2, q1 & q2 AS "and", q1 | q2 AS "or", q1 # q2 AS "xor", ~q1 AS "not" FROM INT8_TBL order by 1;
-        q1        |        q2         |       and        |        or        |       xor        |        not        
-------------------+-------------------+------------------+------------------+------------------+-------------------
-              123 |               456 |               72 |              507 |              435 |              -124
-              123 |  4567890123456789 |               17 | 4567890123456895 | 4567890123456878 |              -124
- 4567890123456789 |               123 |               17 | 4567890123456895 | 4567890123456878 | -4567890123456790
- 4567890123456789 |  4567890123456789 | 4567890123456789 | 4567890123456789 |                0 | -4567890123456790
- 4567890123456789 | -4567890123456789 |                1 |               -1 |               -2 | -4567890123456790
-(5 rows)
-
+ERROR:  binary_optr only support binary optr = [optr_str=&]
 SELECT q1, q1 << 2 AS "shl", q1 >> 3 AS "shr" FROM INT8_TBL order by 1;
-        q1        |        shl        |       shr       
-------------------+-------------------+-----------------
-              123 |               492 |              15
-              123 |               492 |              15
- 4567890123456789 | 18271560493827156 | 570986265432098
- 4567890123456789 | 18271560493827156 | 570986265432098
- 4567890123456789 | 18271560493827156 | 570986265432098
-(5 rows)
-
+ERROR:  binary_optr only support binary optr = [optr_str=<<]
 -- generate_series
 SELECT * FROM generate_series('+4567890123456789'::int8, '+4567890123456799'::int8);
- generate_series  
-------------------
- 4567890123456789
- 4567890123456790
- 4567890123456791
- 4567890123456792
- 4567890123456793
- 4567890123456794
- 4567890123456795
- 4567890123456796
- 4567890123456797
- 4567890123456798
- 4567890123456799
-(11 rows)
-
+ERROR:  function generate_series does not exist
 SELECT * FROM generate_series('+4567890123456789'::int8, '+4567890123456799'::int8, 0);
-ERROR:  step size cannot equal zero
+ERROR:  function generate_series does not exist
 SELECT * FROM generate_series('+4567890123456789'::int8, '+4567890123456799'::int8, 2);
- generate_series  
-------------------
- 4567890123456789
- 4567890123456791
- 4567890123456793
- 4567890123456795
- 4567890123456797
- 4567890123456799
-(6 rows)
-
+ERROR:  function generate_series does not exist
 -- corner case
 SELECT (-1::int8<<63)::text;
-         text         
-----------------------
- -9223372036854775808
-(1 row)
-
+ERROR:  binary_optr only support binary optr = [optr_str=<<]
 SELECT ((-1::int8<<63)+1)::text;
-         text         
-----------------------
- -9223372036854775807
-(1 row)
-
+ERROR:  binary_optr only support binary optr = [optr_str=<<]
 -- check sane handling of INT64_MIN overflow cases
 SELECT (-9223372036854775808)::int8 * (-1)::int8;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775808
+(1 row)
+
 SELECT (-9223372036854775808)::int8 / (-1)::int8;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775808
+(1 row)
+
 SELECT (-9223372036854775808)::int8 % (-1)::int8;
  ?column? 
 ----------
@@ -831,9 +730,17 @@
 (1 row)
 
 SELECT (-9223372036854775808)::int8 * (-1)::int4;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775808
+(1 row)
+
 SELECT (-9223372036854775808)::int8 / (-1)::int4;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775808
+(1 row)
+
 SELECT (-9223372036854775808)::int8 % (-1)::int4;
  ?column? 
 ----------
@@ -841,9 +748,17 @@
 (1 row)
 
 SELECT (-9223372036854775808)::int8 * (-1)::int2;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775808
+(1 row)
+
 SELECT (-9223372036854775808)::int8 / (-1)::int2;
-ERROR:  bigint out of range
+      ?column?       
+---------------------
+ 9223372036854775808
+(1 row)
+
 SELECT (-9223372036854775808)::int8 % (-1)::int2;
  ?column? 
 ----------
@@ -859,17 +774,7 @@
              (0.5::float8),
              (1.5::float8),
              (2.5::float8)) t(x);
-  x   | int8_value 
-------+------------
- -2.5 |         -2
- -1.5 |         -2
- -0.5 |          0
-    0 |          0
-  0.5 |          0
-  1.5 |          2
-  2.5 |          2
-(7 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- check rounding when casting from numeric
 SELECT x, x::int8 AS int8_value
 FROM (VALUES (-2.5::numeric),
@@ -879,17 +784,7 @@
              (0.5::numeric),
              (1.5::numeric),
              (2.5::numeric)) t(x);
-  x   | int8_value 
-------+------------
- -2.5 |         -3
- -1.5 |         -2
- -0.5 |         -1
-  0.0 |          0
-  0.5 |          1
-  1.5 |          2
-  2.5 |          3
-(7 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- test gcd()
 SELECT a, b, gcd(a, b), gcd(a, -b), gcd(b, a), gcd(-b, a)
 FROM (VALUES (0::int8, 0::int8),
@@ -899,21 +794,11 @@
              ((-9223372036854775808)::int8, 1::int8),
              ((-9223372036854775808)::int8, 9223372036854775807::int8),
              ((-9223372036854775808)::int8, 4611686018427387904::int8)) AS v(a, b);
-          a           |          b          |         gcd         |         gcd         |         gcd         |         gcd         
-----------------------+---------------------+---------------------+---------------------+---------------------+---------------------
-                    0 |                   0 |                   0 |                   0 |                   0 |                   0
-                    0 |         29893644334 |         29893644334 |         29893644334 |         29893644334 |         29893644334
-         288484263558 |         29893644334 |             6835958 |             6835958 |             6835958 |             6835958
-        -288484263558 |         29893644334 |             6835958 |             6835958 |             6835958 |             6835958
- -9223372036854775808 |                   1 |                   1 |                   1 |                   1 |                   1
- -9223372036854775808 | 9223372036854775807 |                   1 |                   1 |                   1 |                   1
- -9223372036854775808 | 4611686018427387904 | 4611686018427387904 | 4611686018427387904 | 4611686018427387904 | 4611686018427387904
-(7 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT gcd((-9223372036854775808)::int8, 0::int8); -- overflow
-ERROR:  bigint out of range
+ERROR:  function gcd does not exist
 SELECT gcd((-9223372036854775808)::int8, (-9223372036854775808)::int8); -- overflow
-ERROR:  bigint out of range
+ERROR:  function gcd does not exist
 -- test lcm()
 SELECT a, b, lcm(a, b), lcm(a, -b), lcm(b, a), lcm(-b, a)
 FROM (VALUES (0::int8, 0::int8),
@@ -922,129 +807,100 @@
              (288484263558::int8, 29893644334::int8),
              (-288484263558::int8, 29893644334::int8),
              ((-9223372036854775808)::int8, 0::int8)) AS v(a, b);
-          a           |      b      |       lcm        |       lcm        |       lcm        |       lcm        
-----------------------+-------------+------------------+------------------+------------------+------------------
-                    0 |           0 |                0 |                0 |                0 |                0
-                    0 | 29893644334 |                0 |                0 |                0 |                0
-          29893644334 | 29893644334 |      29893644334 |      29893644334 |      29893644334 |      29893644334
-         288484263558 | 29893644334 | 1261541684539134 | 1261541684539134 | 1261541684539134 | 1261541684539134
-        -288484263558 | 29893644334 | 1261541684539134 | 1261541684539134 | 1261541684539134 | 1261541684539134
- -9223372036854775808 |           0 |                0 |                0 |                0 |                0
-(6 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT lcm((-9223372036854775808)::int8, 1::int8); -- overflow
-ERROR:  bigint out of range
+ERROR:  function lcm does not exist
 SELECT lcm(9223372036854775807::int8, 9223372036854775806::int8); -- overflow
-ERROR:  bigint out of range
+ERROR:  function lcm does not exist
 -- non-decimal literals
 SELECT int8 '0b100101';
- int8 
-------
-   37
+ ?column? 
+----------
+       37
 (1 row)
 
 SELECT int8 '0o273';
- int8 
-------
-  187
+ ?column? 
+----------
+      187
 (1 row)
 
 SELECT int8 '0x42F';
- int8 
-------
- 1071
+ ?column? 
+----------
+     1071
 (1 row)
 
 SELECT int8 '0b';
-ERROR:  invalid input syntax for type bigint: "0b"
+ERROR:  invalid input syntax for type integer: "0b"
 SELECT int8 '0o';
-ERROR:  invalid input syntax for type bigint: "0o"
+ERROR:  invalid input syntax for type integer: "0o"
 SELECT int8 '0x';
-ERROR:  invalid input syntax for type bigint: "0x"
+ERROR:  invalid input syntax for type integer: "0x"
 -- cases near overflow
 SELECT int8 '0b111111111111111111111111111111111111111111111111111111111111111';
-        int8         
+      ?column?       
 ---------------------
  9223372036854775807
 (1 row)
 
 SELECT int8 '0b1000000000000000000000000000000000000000000000000000000000000000';
-ERROR:  value "0b1000000000000000000000000000000000000000000000000000000000000000" is out of range for type bigint
+ERROR:  value "0b1000000000000000000000000000000000000000000000000000000000000000" is out of range for type integer
 SELECT int8 '0o777777777777777777777';
-        int8         
+      ?column?       
 ---------------------
  9223372036854775807
 (1 row)
 
 SELECT int8 '0o1000000000000000000000';
-ERROR:  value "0o1000000000000000000000" is out of range for type bigint
+ERROR:  value "0o1000000000000000000000" is out of range for type integer
 SELECT int8 '0x7FFFFFFFFFFFFFFF';
-        int8         
+      ?column?       
 ---------------------
  9223372036854775807
 (1 row)
 
 SELECT int8 '0x8000000000000000';
-ERROR:  value "0x8000000000000000" is out of range for type bigint
+ERROR:  value "0x8000000000000000" is out of range for type integer
 SELECT int8 '-0b1000000000000000000000000000000000000000000000000000000000000000';
-         int8         
+       ?column?       
 ----------------------
  -9223372036854775808
 (1 row)
 
 SELECT int8 '-0b1000000000000000000000000000000000000000000000000000000000000001';
-ERROR:  value "-0b1000000000000000000000000000000000000000000000000000000000000001" is out of range for type bigint
+ERROR:  invalid input syntax for type integer: "-0b1000000000000000000000000000000000000000000000000000000000000001"
 SELECT int8 '-0o1000000000000000000000';
-         int8         
+       ?column?       
 ----------------------
  -9223372036854775808
 (1 row)
 
 SELECT int8 '-0o1000000000000000000001';
-ERROR:  value "-0o1000000000000000000001" is out of range for type bigint
+ERROR:  invalid input syntax for type integer: "-0o1000000000000000000001"
 SELECT int8 '-0x8000000000000000';
-         int8         
+       ?column?       
 ----------------------
  -9223372036854775808
 (1 row)
 
 SELECT int8 '-0x8000000000000001';
-ERROR:  value "-0x8000000000000001" is out of range for type bigint
+ERROR:  invalid input syntax for type integer: "-0x8000000000000001"
 -- underscores
 SELECT int8 '1_000_000';
-  int8   
----------
- 1000000
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "1_000_000"
 SELECT int8 '1_2_3';
- int8 
-------
-  123
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "1_2_3"
 SELECT int8 '0x1EEE_FFFF';
-   int8    
------------
- 518979583
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0x1EEE_FFFF"
 SELECT int8 '0o2_73';
- int8 
-------
-  187
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0o2_73"
 SELECT int8 '0b_10_0101';
- int8 
-------
-   37
-(1 row)
-
+ERROR:  invalid input syntax for type integer: "0b_10_0101"
 -- error cases
 SELECT int8 '_100';
-ERROR:  invalid input syntax for type bigint: "_100"
+ERROR:  invalid input syntax for type integer: "_100"
 SELECT int8 '100_';
-ERROR:  invalid input syntax for type bigint: "100_"
+ERROR:  invalid input syntax for type integer: "100_"
 SELECT int8 '100__000';
-ERROR:  invalid input syntax for type bigint: "100__000"
+ERROR:  invalid input syntax for type integer: "100__000"
diff -U3 /home/longqimin/pg_regress_input/expected/float4.out /home/longqimin/pg_regress_input/results/float4.out
--- /home/longqimin/pg_regress_input/expected/float4.out	2024-03-11 11:46:21.655870843 +0800
+++ /home/longqimin/pg_regress_input/results/float4.out	2024-03-26 10:06:28.067770887 +0800
@@ -9,44 +9,44 @@
 INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e-20');
 -- test for over and under flow
 INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
-ERROR:  "10e70" is out of range for type real
+ERROR:  value "10e70" is out of range for type floating
 INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
-ERROR:  "-10e70" is out of range for type real
+ERROR:  value "-10e70" is out of range for type floating
 INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
-ERROR:  "10e-70" is out of range for type real
+ERROR:  value "10e-70" is out of range for type floating
 INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
-ERROR:  "-10e-70" is out of range for type real
+ERROR:  value "-10e-70" is out of range for type floating
 INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70'::float8);
-ERROR:  value out of range: overflow
+ERROR:  value out of range
 INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70'::float8);
-ERROR:  value out of range: overflow
+ERROR:  value out of range
 --INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70'::float8);
 --INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70'::float8);
 INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
-ERROR:  "10e400" is out of range for type real
+ERROR:  value "10e400" is out of range for type floating
 INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
-ERROR:  "-10e400" is out of range for type real
+ERROR:  value "-10e400" is out of range for type floating
 INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
-ERROR:  "10e-400" is out of range for type real
+ERROR:  value "10e-400" is out of range for type floating
 INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
-ERROR:  "-10e-400" is out of range for type real
+ERROR:  value "-10e-400" is out of range for type floating
 -- bad input
 INSERT INTO FLOAT4_TBL(f1) VALUES ('');
-ERROR:  invalid input syntax for type real: ""
+ERROR:  invalid input syntax for type floating: ""
 INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
-ERROR:  invalid input syntax for type real: "       "
+ERROR:  invalid input syntax for type floating: "       "
 INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
-ERROR:  invalid input syntax for type real: "xyz"
+ERROR:  invalid input syntax for type floating: "xyz"
 INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
-ERROR:  invalid input syntax for type real: "5.0.0"
+ERROR:  invalid input syntax for type floating: "5.0.0"
 INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
-ERROR:  invalid input syntax for type real: "5 . 0"
+ERROR:  invalid input syntax for type floating: "5 . 0"
 INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
-ERROR:  invalid input syntax for type real: "5.   0"
+ERROR:  invalid input syntax for type floating: "5.   0"
 INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
-ERROR:  invalid input syntax for type real: "     - 3.0"
+ERROR:  invalid input syntax for type floating: "- 3.0"
 INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
-ERROR:  invalid input syntax for type real: "123            5"
+ERROR:  invalid input syntax for type floating: "123            5"
 -- Also try it with non-error-throwing API
 SELECT pg_input_is_valid('34.5', 'float4');
  pg_input_is_valid 
@@ -67,59 +67,55 @@
 (1 row)
 
 SELECT * FROM pg_input_error_info('1e400', 'float4');
-                message                | detail | hint | sql_error_code 
----------------------------------------+--------+------+----------------
- "1e400" is out of range for type real |        |      | 22003
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 -- special inputs
 SELECT 'NaN'::float4;
- float4 
---------
-    NaN
+ ?column? 
+----------
+      nan
 (1 row)
 
 SELECT 'nan'::float4;
- float4 
---------
-    NaN
+ ?column? 
+----------
+      nan
 (1 row)
 
 SELECT '   NAN  '::float4;
- float4 
---------
-    NaN
+ ?column? 
+----------
+      nan
 (1 row)
 
 SELECT 'infinity'::float4;
-  float4  
+ ?column? 
 ----------
- Infinity
+      inf
 (1 row)
 
 SELECT '          -INFINiTY   '::float4;
-  float4   
------------
- -Infinity
+ ?column? 
+----------
+     -inf
 (1 row)
 
 -- bad special inputs
 SELECT 'N A N'::float4;
-ERROR:  invalid input syntax for type real: "N A N"
+ERROR:  invalid input syntax for type floating: "N A N"
 SELECT 'NaN x'::float4;
-ERROR:  invalid input syntax for type real: "NaN x"
+ERROR:  invalid input syntax for type floating: "NaN x"
 SELECT ' INFINITY    x'::float4;
-ERROR:  invalid input syntax for type real: " INFINITY    x"
+ERROR:  invalid input syntax for type floating: "INFINITY    x"
 SELECT 'Infinity'::float4 + 100.0;
  ?column? 
 ----------
- Infinity
+      inf
 (1 row)
 
 SELECT 'Infinity'::float4 / 'Infinity'::float4;
  ?column? 
 ----------
-      NaN
+     -nan
 (1 row)
 
 SELECT '42'::float4 / 'Infinity'::float4;
@@ -131,21 +127,17 @@
 SELECT 'nan'::float4 / 'nan'::float4;
  ?column? 
 ----------
-      NaN
+      nan
 (1 row)
 
 SELECT 'nan'::float4 / '0'::float4;
  ?column? 
 ----------
-      NaN
+      nan
 (1 row)
 
 SELECT 'nan'::numeric::float4;
- float4 
---------
-    NaN
-(1 row)
-
+ERROR:  not implemented type_cast case [to=numeric]
 SELECT * FROM FLOAT4_TBL order by 1;
       f1       
 ---------------
@@ -243,7 +235,7 @@
 
 -- test divide by zero
 SELECT f.f1 / '0.0' from FLOAT4_TBL f order by 1;
-ERROR:  division by zero
+ERROR:  div zero [func=func_14154944641562171856]
 SELECT * FROM FLOAT4_TBL order by 1;
       f1       
 ---------------
@@ -256,170 +248,103 @@
 
 -- test the unary float4abs operator
 SELECT f.f1, @f.f1 AS abs_f1 FROM FLOAT4_TBL f order by 1;
-      f1       |    abs_f1     
----------------+---------------
-        -34.84 |         34.84
-             0 |             0
- 1.2345679e-20 | 1.2345679e-20
-        1004.3 |        1004.3
- 1.2345679e+20 | 1.2345679e+20
-(5 rows)
-
+ERROR:  unary_optr only support +/-, [optr_str=@]
 UPDATE FLOAT4_TBL
    SET f1 = FLOAT4_TBL.f1 * '-1'
    WHERE FLOAT4_TBL.f1 > '0.0';
+ERROR:  only support select and create table statement
 SELECT * FROM FLOAT4_TBL order by 1;
-       f1       
-----------------
- -1.2345679e+20
-        -1004.3
-         -34.84
- -1.2345679e-20
-              0
+      f1       
+---------------
+        -34.84
+             0
+ 1.2345679e-20
+        1004.3
+ 1.2345679e+20
 (5 rows)
 
 -- test edge-case coercions to integer
 SELECT '32767.4'::float4::int2;
- int2  
--------
- 32767
+ ?column? 
+----------
+    32767
 (1 row)
 
 SELECT '32767.6'::float4::int2;
-ERROR:  smallint out of range
+ ?column? 
+----------
+    32767
+(1 row)
+
 SELECT '-32768.4'::float4::int2;
-  int2  
---------
- -32768
+ ?column? 
+----------
+   -32768
 (1 row)
 
 SELECT '-32768.6'::float4::int2;
-ERROR:  smallint out of range
+ ?column? 
+----------
+   -32768
+(1 row)
+
 SELECT '2147483520'::float4::int4;
-    int4    
+  ?column?  
 ------------
  2147483520
 (1 row)
 
 SELECT '2147483647'::float4::int4;
-ERROR:  integer out of range
+ERROR:  int out of range
 SELECT '-2147483648.5'::float4::int4;
-    int4     
--------------
- -2147483648
-(1 row)
-
+ERROR:  int out of range
 SELECT '-2147483900'::float4::int4;
-ERROR:  integer out of range
+ERROR:  int out of range
 SELECT '9223369837831520256'::float4::int8;
-        int8         
+      ?column?       
 ---------------------
  9223369837831520256
 (1 row)
 
 SELECT '9223372036854775807'::float4::int8;
-ERROR:  bigint out of range
+ERROR:  long out of range
 SELECT '-9223372036854775808.5'::float4::int8;
-         int8         
-----------------------
- -9223372036854775808
-(1 row)
-
+ERROR:  long out of range
 SELECT '-9223380000000000000'::float4::int8;
-ERROR:  bigint out of range
+ERROR:  long out of range
 -- Test for correct input rounding in edge cases.
 -- These lists are from Paxson 1991, excluding subnormals and
 -- inputs of over 9 sig. digits.
 SELECT float4send('5e-20'::float4);
- float4send 
-------------
- \x1f6c1e4a
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('67e14'::float4);
- float4send 
-------------
- \x59be6cea
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('985e15'::float4);
- float4send 
-------------
- \x5d5ab6c4
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('55895e-16'::float4);
- float4send 
-------------
- \x2cc4a9bd
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('7038531e-32'::float4);
- float4send 
-------------
- \x15ae43fd
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('702990899e-20'::float4);
- float4send 
-------------
- \x2cf757ca
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('3e-23'::float4);
- float4send 
-------------
- \x1a111234
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('57e18'::float4);
- float4send 
-------------
- \x6045c22c
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('789e-35'::float4);
- float4send 
-------------
- \x0a23de70
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('2539e-18'::float4);
- float4send 
-------------
- \x2736f449
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('76173e28'::float4);
- float4send 
-------------
- \x7616398a
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('887745e-11'::float4);
- float4send 
-------------
- \x3714f05c
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('5382571e-37'::float4);
- float4send 
-------------
- \x0d2eaca7
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('82381273e-35'::float4);
- float4send 
-------------
- \x128289d1
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('750486563e-38'::float4);
- float4send 
-------------
- \x0f18377e
-(1 row)
-
+ERROR:  function float4send does not exist
 -- Test that the smallest possible normalized input value inputs
 -- correctly, either in 9-significant-digit or shortest-decimal
 -- format.
@@ -428,33 +353,31 @@
 -- shortest val is          1.1754944000
 -- midpoint to next val is  1.1754944208...
 SELECT float4send('1.17549435e-38'::float4);
- float4send 
-------------
- \x00800000
-(1 row)
-
+ERROR:  function float4send does not exist
 SELECT float4send('1.1754944e-38'::float4);
- float4send 
-------------
- \x00800000
-(1 row)
-
+ERROR:  function float4send does not exist
 -- test output (and round-trip safety) of various values.
 -- To ensure we're testing what we think we're testing, start with
 -- float values specified by bit patterns (as a useful side effect,
 -- this means we'll fail on non-IEEE platforms).
 create type xfloat4;
+ERROR:  only support select and create table statement
 create function xfloat4in(cstring) returns xfloat4 immutable strict
   language internal as 'int4in';
-NOTICE:  return type xfloat4 is only a shell
+ERROR:  only support select and create table statement
 create function xfloat4out(xfloat4) returns cstring immutable strict
   language internal as 'int4out';
-NOTICE:  argument type xfloat4 is only a shell
+ERROR:  only support select and create table statement
 create type xfloat4 (input = xfloat4in, output = xfloat4out, like = float4);
+ERROR:  only support select and create table statement
 create cast (xfloat4 as float4) without function;
+ERROR:  only support select and create table statement
 create cast (float4 as xfloat4) without function;
+ERROR:  only support select and create table statement
 create cast (xfloat4 as integer) without function;
+ERROR:  only support select and create table statement
 create cast (integer as xfloat4) without function;
+ERROR:  only support select and create table statement
 -- float4: seeeeeee emmmmmmm mmmmmmmm mmmmmmmm
 -- we don't care to assume the platform's strtod() handles subnormals
 -- correctly; those are "use at your own risk". However we do test
@@ -480,31 +403,7 @@
   from (select bits::integer::xfloat4::float4 as flt
           from testdata
 	offset 0) s;
-   ibits    |      flt      
-------------+---------------
- \x00000001 |         1e-45
- \x00000002 |         3e-45
- \x00000003 |         4e-45
- \x00000010 |       2.2e-44
- \x00000011 |       2.4e-44
- \x00000100 |      3.59e-43
- \x00000101 |       3.6e-43
- \x00004000 |    2.2959e-41
- \x00004001 |     2.296e-41
- \x00080000 |   7.34684e-40
- \x00080001 |   7.34685e-40
- \x0053c4f4 |     7.693e-39
- \x006c85c4 |   9.96622e-39
- \x0041ca76 |  6.041937e-39
- \x004b7678 |  6.930161e-39
- \x00000007 |         1e-44
- \x00424fe2 |    6.0898e-39
- \x007ffff0 | 1.1754921e-38
- \x007ffff1 | 1.1754922e-38
- \x007ffffe | 1.1754941e-38
- \x007fffff | 1.1754942e-38
-(21 rows)
-
+ERROR:  clapdb doesn't support CTE currently
 with testdata(bits) as (values
   (x'00000000'),
   -- smallest normal values
@@ -670,277 +569,7 @@
   from (select bits::integer::xfloat4::float4 as flt
           from testdata
 	offset 0) s;
-   ibits    |      flt       |     r_flt      |   obits    | correct 
-------------+----------------+----------------+------------+---------
- \x00000000 |              0 |              0 | \x00000000 | t
- \x00800000 |  1.1754944e-38 |  1.1754944e-38 | \x00800000 | t
- \x00800001 |  1.1754945e-38 |  1.1754945e-38 | \x00800001 | t
- \x00800004 |  1.1754949e-38 |  1.1754949e-38 | \x00800004 | t
- \x00800005 |   1.175495e-38 |   1.175495e-38 | \x00800005 | t
- \x00800006 |  1.1754952e-38 |  1.1754952e-38 | \x00800006 | t
- \x008002f1 |  1.1755999e-38 |  1.1755999e-38 | \x008002f1 | t
- \x008002f2 |     1.1756e-38 |     1.1756e-38 | \x008002f2 | t
- \x008002f3 |  1.1756001e-38 |  1.1756001e-38 | \x008002f3 | t
- \x00800e17 |  1.1759998e-38 |  1.1759998e-38 | \x00800e17 | t
- \x00800e18 |      1.176e-38 |      1.176e-38 | \x00800e18 | t
- \x00800e19 |  1.1760001e-38 |  1.1760001e-38 | \x00800e19 | t
- \x01000001 |   2.350989e-38 |   2.350989e-38 | \x01000001 | t
- \x01102843 |   2.647751e-38 |   2.647751e-38 | \x01102843 | t
- \x01a52c98 |  6.0675416e-38 |  6.0675416e-38 | \x01a52c98 | t
- \x0219c229 |  1.1296386e-37 |  1.1296386e-37 | \x0219c229 | t
- \x02e4464d |   3.354194e-37 |   3.354194e-37 | \x02e4464d | t
- \x037343c1 |   7.148906e-37 |   7.148906e-37 | \x037343c1 | t
- \x03a91b36 |   9.939175e-37 |   9.939175e-37 | \x03a91b36 | t
- \x047ada65 |   2.948764e-36 |   2.948764e-36 | \x047ada65 | t
- \x0496fe87 |  3.5498577e-36 |  3.5498577e-36 | \x0496fe87 | t
- \x0550844f |   9.804414e-36 |   9.804414e-36 | \x0550844f | t
- \x05999da3 |  1.4445957e-35 |  1.4445957e-35 | \x05999da3 | t
- \x060ea5e2 |  2.6829103e-35 |  2.6829103e-35 | \x060ea5e2 | t
- \x06e63c45 |   8.660494e-35 |   8.660494e-35 | \x06e63c45 | t
- \x07f1e548 |   3.639641e-34 |   3.639641e-34 | \x07f1e548 | t
- \x0fc5282b |  1.9441172e-29 |  1.9441172e-29 | \x0fc5282b | t
- \x1f850283 |  5.6331846e-20 |  5.6331846e-20 | \x1f850283 | t
- \x2874a9d6 |  1.3581548e-14 |  1.3581548e-14 | \x2874a9d6 | t
- \x3356bf94 |  4.9999997e-08 |  4.9999997e-08 | \x3356bf94 | t
- \x3356bf95 |          5e-08 |          5e-08 | \x3356bf95 | t
- \x3356bf96 |  5.0000004e-08 |  5.0000004e-08 | \x3356bf96 | t
- \x33d6bf94 |  9.9999994e-08 |  9.9999994e-08 | \x33d6bf94 | t
- \x33d6bf95 |          1e-07 |          1e-07 | \x33d6bf95 | t
- \x33d6bf96 |  1.0000001e-07 |  1.0000001e-07 | \x33d6bf96 | t
- \x34a10faf |  2.9999998e-07 |  2.9999998e-07 | \x34a10faf | t
- \x34a10fb0 |          3e-07 |          3e-07 | \x34a10fb0 | t
- \x34a10fb1 |  3.0000004e-07 |  3.0000004e-07 | \x34a10fb1 | t
- \x350637bc |  4.9999994e-07 |  4.9999994e-07 | \x350637bc | t
- \x350637bd |          5e-07 |          5e-07 | \x350637bd | t
- \x350637be |  5.0000006e-07 |  5.0000006e-07 | \x350637be | t
- \x35719786 |   8.999999e-07 |   8.999999e-07 | \x35719786 | t
- \x35719787 |          9e-07 |          9e-07 | \x35719787 | t
- \x35719788 |  9.0000003e-07 |  9.0000003e-07 | \x35719788 | t
- \x358637bc |   9.999999e-07 |   9.999999e-07 | \x358637bc | t
- \x358637bd |          1e-06 |          1e-06 | \x358637bd | t
- \x358637be |  1.0000001e-06 |  1.0000001e-06 | \x358637be | t
- \x36a7c5ab |  4.9999994e-06 |  4.9999994e-06 | \x36a7c5ab | t
- \x36a7c5ac |          5e-06 |          5e-06 | \x36a7c5ac | t
- \x36a7c5ad |  5.0000003e-06 |  5.0000003e-06 | \x36a7c5ad | t
- \x3727c5ab |   9.999999e-06 |   9.999999e-06 | \x3727c5ab | t
- \x3727c5ac |          1e-05 |          1e-05 | \x3727c5ac | t
- \x3727c5ad |  1.0000001e-05 |  1.0000001e-05 | \x3727c5ad | t
- \x38d1b714 |  9.9999976e-05 |  9.9999976e-05 | \x38d1b714 | t
- \x38d1b715 |   9.999998e-05 |   9.999998e-05 | \x38d1b715 | t
- \x38d1b716 |   9.999999e-05 |   9.999999e-05 | \x38d1b716 | t
- \x38d1b717 |         0.0001 |         0.0001 | \x38d1b717 | t
- \x38d1b718 | 0.000100000005 | 0.000100000005 | \x38d1b718 | t
- \x38d1b719 |  0.00010000001 |  0.00010000001 | \x38d1b719 | t
- \x38d1b71a |  0.00010000002 |  0.00010000002 | \x38d1b71a | t
- \x38d1b71b |  0.00010000003 |  0.00010000003 | \x38d1b71b | t
- \x38d1b71c | 0.000100000034 | 0.000100000034 | \x38d1b71c | t
- \x38d1b71d |  0.00010000004 |  0.00010000004 | \x38d1b71d | t
- \x38dffffe |  0.00010681151 |  0.00010681151 | \x38dffffe | t
- \x38dfffff | 0.000106811516 | 0.000106811516 | \x38dfffff | t
- \x38e00000 |  0.00010681152 |  0.00010681152 | \x38e00000 | t
- \x38efffff |  0.00011444091 |  0.00011444091 | \x38efffff | t
- \x38f00000 |  0.00011444092 |  0.00011444092 | \x38f00000 | t
- \x38f00001 | 0.000114440925 | 0.000114440925 | \x38f00001 | t
- \x3a83126e |   0.0009999999 |   0.0009999999 | \x3a83126e | t
- \x3a83126f |          0.001 |          0.001 | \x3a83126f | t
- \x3a831270 |   0.0010000002 |   0.0010000002 | \x3a831270 | t
- \x3c23d709 |    0.009999999 |    0.009999999 | \x3c23d709 | t
- \x3c23d70a |           0.01 |           0.01 | \x3c23d70a | t
- \x3c23d70b |    0.010000001 |    0.010000001 | \x3c23d70b | t
- \x3dcccccc |    0.099999994 |    0.099999994 | \x3dcccccc | t
- \x3dcccccd |            0.1 |            0.1 | \x3dcccccd | t
- \x3dccccce |     0.10000001 |     0.10000001 | \x3dccccce | t
- \x3dcccd6f |     0.10000121 |     0.10000121 | \x3dcccd6f | t
- \x3dcccd70 |    0.100001216 |    0.100001216 | \x3dcccd70 | t
- \x3dcccd71 |     0.10000122 |     0.10000122 | \x3dcccd71 | t
- \x3effffff |     0.49999997 |     0.49999997 | \x3effffff | t
- \x3f000000 |            0.5 |            0.5 | \x3f000000 | t
- \x3f000001 |     0.50000006 |     0.50000006 | \x3f000001 | t
- \x3f333332 |      0.6999999 |      0.6999999 | \x3f333332 | t
- \x3f333333 |            0.7 |            0.7 | \x3f333333 | t
- \x3f333334 |     0.70000005 |     0.70000005 | \x3f333334 | t
- \x3f666665 |      0.8999999 |      0.8999999 | \x3f666665 | t
- \x3f666666 |            0.9 |            0.9 | \x3f666666 | t
- \x3f666667 |     0.90000004 |     0.90000004 | \x3f666667 | t
- \x3f7d70a3 |     0.98999995 |     0.98999995 | \x3f7d70a3 | t
- \x3f7d70a4 |           0.99 |           0.99 | \x3f7d70a4 | t
- \x3f7d70a5 |     0.99000007 |     0.99000007 | \x3f7d70a5 | t
- \x3f7fbe76 |     0.99899995 |     0.99899995 | \x3f7fbe76 | t
- \x3f7fbe77 |          0.999 |          0.999 | \x3f7fbe77 | t
- \x3f7fbe78 |      0.9990001 |      0.9990001 | \x3f7fbe78 | t
- \x3f7ff971 |      0.9998999 |      0.9998999 | \x3f7ff971 | t
- \x3f7ff972 |         0.9999 |         0.9999 | \x3f7ff972 | t
- \x3f7ff973 |     0.99990004 |     0.99990004 | \x3f7ff973 | t
- \x3f7fff57 |      0.9999899 |      0.9999899 | \x3f7fff57 | t
- \x3f7fff58 |        0.99999 |        0.99999 | \x3f7fff58 | t
- \x3f7fff59 |     0.99999005 |     0.99999005 | \x3f7fff59 | t
- \x3f7fffee |      0.9999989 |      0.9999989 | \x3f7fffee | t
- \x3f7fffef |       0.999999 |       0.999999 | \x3f7fffef | t
- \x3f7ffff0 |     0.99999905 |     0.99999905 | \x3f7ffff0 | t
- \x3f7ffff1 |      0.9999991 |      0.9999991 | \x3f7ffff1 | t
- \x3f7ffff2 |     0.99999917 |     0.99999917 | \x3f7ffff2 | t
- \x3f7ffff3 |      0.9999992 |      0.9999992 | \x3f7ffff3 | t
- \x3f7ffff4 |      0.9999993 |      0.9999993 | \x3f7ffff4 | t
- \x3f7ffff5 |     0.99999934 |     0.99999934 | \x3f7ffff5 | t
- \x3f7ffff6 |      0.9999994 |      0.9999994 | \x3f7ffff6 | t
- \x3f7ffff7 |     0.99999946 |     0.99999946 | \x3f7ffff7 | t
- \x3f7ffff8 |      0.9999995 |      0.9999995 | \x3f7ffff8 | t
- \x3f7ffff9 |      0.9999996 |      0.9999996 | \x3f7ffff9 | t
- \x3f7ffffa |     0.99999964 |     0.99999964 | \x3f7ffffa | t
- \x3f7ffffb |      0.9999997 |      0.9999997 | \x3f7ffffb | t
- \x3f7ffffc |     0.99999976 |     0.99999976 | \x3f7ffffc | t
- \x3f7ffffd |      0.9999998 |      0.9999998 | \x3f7ffffd | t
- \x3f7ffffe |      0.9999999 |      0.9999999 | \x3f7ffffe | t
- \x3f7fffff |     0.99999994 |     0.99999994 | \x3f7fffff | t
- \x3f800000 |              1 |              1 | \x3f800000 | t
- \x3f800001 |      1.0000001 |      1.0000001 | \x3f800001 | t
- \x3f800002 |      1.0000002 |      1.0000002 | \x3f800002 | t
- \x3f800003 |      1.0000004 |      1.0000004 | \x3f800003 | t
- \x3f800004 |      1.0000005 |      1.0000005 | \x3f800004 | t
- \x3f800005 |      1.0000006 |      1.0000006 | \x3f800005 | t
- \x3f800006 |      1.0000007 |      1.0000007 | \x3f800006 | t
- \x3f800007 |      1.0000008 |      1.0000008 | \x3f800007 | t
- \x3f800008 |       1.000001 |       1.000001 | \x3f800008 | t
- \x3f800009 |      1.0000011 |      1.0000011 | \x3f800009 | t
- \x3f80000f |      1.0000018 |      1.0000018 | \x3f80000f | t
- \x3f800010 |      1.0000019 |      1.0000019 | \x3f800010 | t
- \x3f800011 |       1.000002 |       1.000002 | \x3f800011 | t
- \x3f800012 |      1.0000021 |      1.0000021 | \x3f800012 | t
- \x3f800013 |      1.0000023 |      1.0000023 | \x3f800013 | t
- \x3f800014 |      1.0000024 |      1.0000024 | \x3f800014 | t
- \x3f800017 |      1.0000027 |      1.0000027 | \x3f800017 | t
- \x3f800018 |      1.0000029 |      1.0000029 | \x3f800018 | t
- \x3f800019 |       1.000003 |       1.000003 | \x3f800019 | t
- \x3f80001a |      1.0000031 |      1.0000031 | \x3f80001a | t
- \x3f80001b |      1.0000032 |      1.0000032 | \x3f80001b | t
- \x3f80001c |      1.0000033 |      1.0000033 | \x3f80001c | t
- \x3f800029 |      1.0000049 |      1.0000049 | \x3f800029 | t
- \x3f80002a |       1.000005 |       1.000005 | \x3f80002a | t
- \x3f80002b |      1.0000051 |      1.0000051 | \x3f80002b | t
- \x3f800053 |      1.0000099 |      1.0000099 | \x3f800053 | t
- \x3f800054 |        1.00001 |        1.00001 | \x3f800054 | t
- \x3f800055 |      1.0000101 |      1.0000101 | \x3f800055 | t
- \x3f800346 |      1.0000999 |      1.0000999 | \x3f800346 | t
- \x3f800347 |         1.0001 |         1.0001 | \x3f800347 | t
- \x3f800348 |      1.0001001 |      1.0001001 | \x3f800348 | t
- \x3f8020c4 |      1.0009999 |      1.0009999 | \x3f8020c4 | t
- \x3f8020c5 |          1.001 |          1.001 | \x3f8020c5 | t
- \x3f8020c6 |      1.0010002 |      1.0010002 | \x3f8020c6 | t
- \x3f8147ad |      1.0099999 |      1.0099999 | \x3f8147ad | t
- \x3f8147ae |           1.01 |           1.01 | \x3f8147ae | t
- \x3f8147af |      1.0100001 |      1.0100001 | \x3f8147af | t
- \x3f8ccccc |      1.0999999 |      1.0999999 | \x3f8ccccc | t
- \x3f8ccccd |            1.1 |            1.1 | \x3f8ccccd | t
- \x3f8cccce |      1.1000001 |      1.1000001 | \x3f8cccce | t
- \x3fc90fdb |      1.5707964 |      1.5707964 | \x3fc90fdb | t
- \x402df854 |      2.7182817 |      2.7182817 | \x402df854 | t
- \x40490fdb |      3.1415927 |      3.1415927 | \x40490fdb | t
- \x409fffff |      4.9999995 |      4.9999995 | \x409fffff | t
- \x40a00000 |              5 |              5 | \x40a00000 | t
- \x40a00001 |      5.0000005 |      5.0000005 | \x40a00001 | t
- \x40afffff |      5.4999995 |      5.4999995 | \x40afffff | t
- \x40b00000 |            5.5 |            5.5 | \x40b00000 | t
- \x40b00001 |      5.5000005 |      5.5000005 | \x40b00001 | t
- \x411fffff |       9.999999 |       9.999999 | \x411fffff | t
- \x41200000 |             10 |             10 | \x41200000 | t
- \x41200001 |      10.000001 |      10.000001 | \x41200001 | t
- \x42c7ffff |       99.99999 |       99.99999 | \x42c7ffff | t
- \x42c80000 |            100 |            100 | \x42c80000 | t
- \x42c80001 |      100.00001 |      100.00001 | \x42c80001 | t
- \x4479ffff |      999.99994 |      999.99994 | \x4479ffff | t
- \x447a0000 |           1000 |           1000 | \x447a0000 | t
- \x447a0001 |     1000.00006 |     1000.00006 | \x447a0001 | t
- \x461c3fff |       9999.999 |       9999.999 | \x461c3fff | t
- \x461c4000 |          10000 |          10000 | \x461c4000 | t
- \x461c4001 |      10000.001 |      10000.001 | \x461c4001 | t
- \x47c34fff |       99999.99 |       99999.99 | \x47c34fff | t
- \x47c35000 |         100000 |         100000 | \x47c35000 | t
- \x47c35001 |      100000.01 |      100000.01 | \x47c35001 | t
- \x497423ff |      999999.94 |      999999.94 | \x497423ff | t
- \x49742400 |          1e+06 |          1e+06 | \x49742400 | t
- \x49742401 | 1.00000006e+06 | 1.00000006e+06 | \x49742401 | t
- \x4b18967f |   9.999999e+06 |   9.999999e+06 | \x4b18967f | t
- \x4b189680 |          1e+07 |          1e+07 | \x4b189680 | t
- \x4b189681 |  1.0000001e+07 |  1.0000001e+07 | \x4b189681 | t
- \x4cbebc1f |   9.999999e+07 |   9.999999e+07 | \x4cbebc1f | t
- \x4cbebc20 |          1e+08 |          1e+08 | \x4cbebc20 | t
- \x4cbebc21 |  1.0000001e+08 |  1.0000001e+08 | \x4cbebc21 | t
- \x4e6e6b27 |  9.9999994e+08 |  9.9999994e+08 | \x4e6e6b27 | t
- \x4e6e6b28 |          1e+09 |          1e+09 | \x4e6e6b28 | t
- \x4e6e6b29 | 1.00000006e+09 | 1.00000006e+09 | \x4e6e6b29 | t
- \x501502f8 |   9.999999e+09 |   9.999999e+09 | \x501502f8 | t
- \x501502f9 |          1e+10 |          1e+10 | \x501502f9 | t
- \x501502fa |  1.0000001e+10 |  1.0000001e+10 | \x501502fa | t
- \x51ba43b6 |   9.999999e+10 |   9.999999e+10 | \x51ba43b6 | t
- \x51ba43b7 |          1e+11 |          1e+11 | \x51ba43b7 | t
- \x51ba43b8 |  1.0000001e+11 |  1.0000001e+11 | \x51ba43b8 | t
- \x1f6c1e4a |          5e-20 |          5e-20 | \x1f6c1e4a | t
- \x59be6cea |        6.7e+15 |        6.7e+15 | \x59be6cea | t
- \x5d5ab6c4 |       9.85e+17 |       9.85e+17 | \x5d5ab6c4 | t
- \x2cc4a9bd |     5.5895e-12 |     5.5895e-12 | \x2cc4a9bd | t
- \x15ae43fd |   7.038531e-26 |   7.038531e-26 | \x15ae43fd | t
- \x2cf757ca |  7.0299088e-12 |  7.0299088e-12 | \x2cf757ca | t
- \x665ba998 |  2.5933168e+23 |  2.5933168e+23 | \x665ba998 | t
- \x743c3324 |  5.9642887e+31 |  5.9642887e+31 | \x743c3324 | t
- \x47f1205a |       123456.7 |       123456.7 | \x47f1205a | t
- \x4640e6ae |       12345.67 |       12345.67 | \x4640e6ae | t
- \x449a5225 |       1234.567 |       1234.567 | \x449a5225 | t
- \x42f6e9d5 |       123.4567 |       123.4567 | \x42f6e9d5 | t
- \x414587dd |       12.34567 |       12.34567 | \x414587dd | t
- \x3f9e064b |       1.234567 |       1.234567 | \x3f9e064b | t
- \x4c000004 |  3.3554448e+07 |  3.3554448e+07 | \x4c000004 | t
- \x50061c46 |   8.999999e+09 |   8.999999e+09 | \x50061c46 | t
- \x510006a8 |  3.4366718e+10 |  3.4366718e+10 | \x510006a8 | t
- \x48951f84 |      305404.12 |      305404.12 | \x48951f84 | t
- \x45fd1840 |      8099.0312 |      8099.0312 | \x45fd1840 | t
- \x39800000 |  0.00024414062 |  0.00024414062 | \x39800000 | t
- \x3b200000 |   0.0024414062 |   0.0024414062 | \x3b200000 | t
- \x3b900000 |   0.0043945312 |   0.0043945312 | \x3b900000 | t
- \x3bd00000 |   0.0063476562 |   0.0063476562 | \x3bd00000 | t
- \x63800000 |  4.7223665e+21 |  4.7223665e+21 | \x63800000 | t
- \x4b000000 |   8.388608e+06 |   8.388608e+06 | \x4b000000 | t
- \x4b800000 |  1.6777216e+07 |  1.6777216e+07 | \x4b800000 | t
- \x4c000001 |  3.3554436e+07 |  3.3554436e+07 | \x4c000001 | t
- \x4c800b0d |  6.7131496e+07 |  6.7131496e+07 | \x4c800b0d | t
- \x00d24584 |  1.9310392e-38 |  1.9310392e-38 | \x00d24584 | t
- \x00d90b88 |   1.993244e-38 |   1.993244e-38 | \x00d90b88 | t
- \x45803f34 |      4103.9004 |      4103.9004 | \x45803f34 | t
- \x4f9f24f7 |  5.3399997e+09 |  5.3399997e+09 | \x4f9f24f7 | t
- \x3a8722c3 |   0.0010310042 |   0.0010310042 | \x3a8722c3 | t
- \x5c800041 |   2.882326e+17 |   2.882326e+17 | \x5c800041 | t
- \x15ae43fd |   7.038531e-26 |   7.038531e-26 | \x15ae43fd | t
- \x5d4cccfb |   9.223404e+17 |   9.223404e+17 | \x5d4cccfb | t
- \x4c800001 |   6.710887e+07 |   6.710887e+07 | \x4c800001 | t
- \x57800ed8 |   2.816025e+14 |   2.816025e+14 | \x57800ed8 | t
- \x5f000000 |   9.223372e+18 |   9.223372e+18 | \x5f000000 | t
- \x700000f0 |  1.5846086e+29 |  1.5846086e+29 | \x700000f0 | t
- \x5f23e9ac |  1.1811161e+19 |  1.1811161e+19 | \x5f23e9ac | t
- \x5e9502f9 |   5.368709e+18 |   5.368709e+18 | \x5e9502f9 | t
- \x5e8012b1 |  4.6143166e+18 |  4.6143166e+18 | \x5e8012b1 | t
- \x3c000028 |    0.007812537 |    0.007812537 | \x3c000028 | t
- \x60cde861 | 1.18697725e+20 | 1.18697725e+20 | \x60cde861 | t
- \x03aa2a50 | 1.00014165e-36 | 1.00014165e-36 | \x03aa2a50 | t
- \x43480000 |            200 |            200 | \x43480000 | t
- \x4c000000 |  3.3554432e+07 |  3.3554432e+07 | \x4c000000 | t
- \x5d1502f9 |  6.7108864e+17 |  6.7108864e+17 | \x5d1502f9 | t
- \x5d9502f9 |  1.3421773e+18 |  1.3421773e+18 | \x5d9502f9 | t
- \x5e1502f9 |  2.6843546e+18 |  2.6843546e+18 | \x5e1502f9 | t
- \x3f99999a |            1.2 |            1.2 | \x3f99999a | t
- \x3f9d70a4 |           1.23 |           1.23 | \x3f9d70a4 | t
- \x3f9df3b6 |          1.234 |          1.234 | \x3f9df3b6 | t
- \x3f9e0419 |         1.2345 |         1.2345 | \x3f9e0419 | t
- \x3f9e0610 |        1.23456 |        1.23456 | \x3f9e0610 | t
- \x3f9e064b |       1.234567 |       1.234567 | \x3f9e064b | t
- \x3f9e0651 |      1.2345678 |      1.2345678 | \x3f9e0651 | t
- \x03d20cfe | 1.23456735e-36 | 1.23456735e-36 | \x03d20cfe | t
-(261 rows)
-
+ERROR:  clapdb doesn't support CTE currently
 -- clean up, lest opr_sanity complain
 drop type xfloat4 cascade;
-NOTICE:  drop cascades to 6 other objects
-DETAIL:  drop cascades to function xfloat4in(cstring)
-drop cascades to function xfloat4out(xfloat4)
-drop cascades to cast from xfloat4 to real
-drop cascades to cast from real to xfloat4
-drop cascades to cast from xfloat4 to integer
-drop cascades to cast from integer to xfloat4
+ERROR:  only support select and create table statement
diff -U3 /home/longqimin/pg_regress_input/expected/float8.out /home/longqimin/pg_regress_input/results/float8.out
--- /home/longqimin/pg_regress_input/expected/float8.out	2024-03-25 09:21:06.162601856 +0800
+++ /home/longqimin/pg_regress_input/results/float8.out	2024-03-26 10:06:37.044795274 +0800
@@ -6,6 +6,7 @@
 -- (This temporarily hides the table created in test_setup.sql)
 --
 CREATE TEMP TABLE FLOAT8_TBL(f1 float8);
+ERROR:  relation "public.float8_tbl" already exists
 INSERT INTO FLOAT8_TBL(f1) VALUES ('    0.0   ');
 INSERT INTO FLOAT8_TBL(f1) VALUES ('1004.30  ');
 INSERT INTO FLOAT8_TBL(f1) VALUES ('   -34.84');
@@ -13,37 +14,33 @@
 INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e-200');
 -- test for underflow and overflow handling
 SELECT '10e400'::float8;
-ERROR:  "10e400" is out of range for type double precision
+ERROR:  value "10e400" is out of range for type floating
 SELECT '-10e400'::float8;
-ERROR:  "-10e400" is out of range for type double precision
+ERROR:  value "-10e400" is out of range for type floating
 SELECT '10e-400'::float8;
-ERROR:  "10e-400" is out of range for type double precision
+ERROR:  value "10e-400" is out of range for type floating
 SELECT '-10e-400'::float8;
-ERROR:  "-10e-400" is out of range for type double precision
+ERROR:  value "-10e-400" is out of range for type floating
 -- test smallest normalized input
 SELECT float8send('2.2250738585072014E-308'::float8);
-     float8send     
---------------------
- \x0010000000000000
-(1 row)
-
+ERROR:  function float8send does not exist
 -- bad input
 INSERT INTO FLOAT8_TBL(f1) VALUES ('');
-ERROR:  invalid input syntax for type double precision: ""
+ERROR:  invalid input syntax for type floating: ""
 INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
-ERROR:  invalid input syntax for type double precision: "     "
+ERROR:  invalid input syntax for type floating: "     "
 INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
-ERROR:  invalid input syntax for type double precision: "xyz"
+ERROR:  invalid input syntax for type floating: "xyz"
 INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
-ERROR:  invalid input syntax for type double precision: "5.0.0"
+ERROR:  invalid input syntax for type floating: "5.0.0"
 INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
-ERROR:  invalid input syntax for type double precision: "5 . 0"
+ERROR:  invalid input syntax for type floating: "5 . 0"
 INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
-ERROR:  invalid input syntax for type double precision: "5.   0"
+ERROR:  invalid input syntax for type floating: "5.   0"
 INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
-ERROR:  invalid input syntax for type double precision: "    - 3"
+ERROR:  invalid input syntax for type floating: "- 3"
 INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
-ERROR:  invalid input syntax for type double precision: "123           5"
+ERROR:  invalid input syntax for type floating: "123           5"
 -- Also try it with non-error-throwing API
 SELECT pg_input_is_valid('34.5', 'float8');
  pg_input_is_valid 
@@ -64,59 +61,55 @@
 (1 row)
 
 SELECT * FROM pg_input_error_info('1e4000', 'float8');
-                      message                       | detail | hint | sql_error_code 
-----------------------------------------------------+--------+------+----------------
- "1e4000" is out of range for type double precision |        |      | 22003
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 -- special inputs
 SELECT 'NaN'::float8;
- float8 
---------
-    NaN
+ ?column? 
+----------
+      nan
 (1 row)
 
 SELECT 'nan'::float8;
- float8 
---------
-    NaN
+ ?column? 
+----------
+      nan
 (1 row)
 
 SELECT '   NAN  '::float8;
- float8 
---------
-    NaN
+ ?column? 
+----------
+      nan
 (1 row)
 
 SELECT 'infinity'::float8;
-  float8  
+ ?column? 
 ----------
- Infinity
+      inf
 (1 row)
 
 SELECT '          -INFINiTY   '::float8;
-  float8   
------------
- -Infinity
+ ?column? 
+----------
+     -inf
 (1 row)
 
 -- bad special inputs
 SELECT 'N A N'::float8;
-ERROR:  invalid input syntax for type double precision: "N A N"
+ERROR:  invalid input syntax for type floating: "N A N"
 SELECT 'NaN x'::float8;
-ERROR:  invalid input syntax for type double precision: "NaN x"
+ERROR:  invalid input syntax for type floating: "NaN x"
 SELECT ' INFINITY    x'::float8;
-ERROR:  invalid input syntax for type double precision: " INFINITY    x"
+ERROR:  invalid input syntax for type floating: "INFINITY    x"
 SELECT 'Infinity'::float8 + 100.0;
  ?column? 
 ----------
- Infinity
+      inf
 (1 row)
 
 SELECT 'Infinity'::float8 / 'Infinity'::float8;
  ?column? 
 ----------
-      NaN
+     -nan
 (1 row)
 
 SELECT '42'::float8 / 'Infinity'::float8;
@@ -128,39 +121,45 @@
 SELECT 'nan'::float8 / 'nan'::float8;
  ?column? 
 ----------
-      NaN
+      nan
 (1 row)
 
 SELECT 'nan'::float8 / '0'::float8;
  ?column? 
 ----------
-      NaN
+      nan
 (1 row)
 
 SELECT 'nan'::numeric::float8;
- float8 
---------
-    NaN
-(1 row)
-
+ERROR:  not implemented type_cast case [to=numeric]
 SELECT * FROM FLOAT8_TBL order by 1;
-          f1          
-----------------------
-               -34.84
-                    0
- 1.2345678901234e-200
-               1004.3
- 1.2345678901234e+200
-(5 rows)
+          f1           
+-----------------------
+ -1.2345678901234e+200
+               -1004.3
+                -34.84
+                -34.84
+ -1.2345678901234e-200
+                     0
+                     0
+  1.2345678901234e-200
+                1004.3
+  1.2345678901234e+200
+(10 rows)
 
 SELECT f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3' order by 1;
-          f1          
-----------------------
-               -34.84
-                    0
- 1.2345678901234e-200
- 1.2345678901234e+200
-(4 rows)
+          f1           
+-----------------------
+ -1.2345678901234e+200
+               -1004.3
+                -34.84
+                -34.84
+ -1.2345678901234e-200
+                     0
+                     0
+  1.2345678901234e-200
+  1.2345678901234e+200
+(9 rows)
 
 SELECT f.* FROM FLOAT8_TBL f WHERE f.f1 = '1004.3' order by 1;
    f1   
@@ -169,38 +168,58 @@
 (1 row)
 
 SELECT f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1 order by 1;
-          f1          
-----------------------
-               -34.84
-                    0
- 1.2345678901234e-200
-(3 rows)
+          f1           
+-----------------------
+ -1.2345678901234e+200
+               -1004.3
+                -34.84
+                -34.84
+ -1.2345678901234e-200
+                     0
+                     0
+  1.2345678901234e-200
+(8 rows)
 
 SELECT f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3' order by 1;
-          f1          
-----------------------
-               -34.84
-                    0
- 1.2345678901234e-200
-(3 rows)
+          f1           
+-----------------------
+ -1.2345678901234e+200
+               -1004.3
+                -34.84
+                -34.84
+ -1.2345678901234e-200
+                     0
+                     0
+  1.2345678901234e-200
+(8 rows)
 
 SELECT f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1 order by 1;
-          f1          
-----------------------
-               -34.84
-                    0
- 1.2345678901234e-200
-               1004.3
-(4 rows)
+          f1           
+-----------------------
+ -1.2345678901234e+200
+               -1004.3
+                -34.84
+                -34.84
+ -1.2345678901234e-200
+                     0
+                     0
+  1.2345678901234e-200
+                1004.3
+(9 rows)
 
 SELECT f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3' order by 1;
-          f1          
-----------------------
-               -34.84
-                    0
- 1.2345678901234e-200
-               1004.3
-(4 rows)
+          f1           
+-----------------------
+ -1.2345678901234e+200
+               -1004.3
+                -34.84
+                -34.84
+ -1.2345678901234e-200
+                     0
+                     0
+  1.2345678901234e-200
+                1004.3
+(9 rows)
 
 SELECT f.f1, f.f1 * '-10' AS x
    FROM FLOAT8_TBL f
@@ -244,526 +263,244 @@
 
 SELECT f.f1 ^ '2.0' AS square_f1
    FROM FLOAT8_TBL f where f.f1 = '1004.3' order by 1;
-     square_f1      
---------------------
- 1008618.4899999999
-(1 row)
-
+ERROR:  binary_optr only support binary optr = [optr_str=^]
 -- absolute value
 SELECT f.f1, @f.f1 AS abs_f1
    FROM FLOAT8_TBL f order by 1;
-          f1          |        abs_f1        
-----------------------+----------------------
-               -34.84 |                34.84
-                    0 |                    0
- 1.2345678901234e-200 | 1.2345678901234e-200
-               1004.3 |               1004.3
- 1.2345678901234e+200 | 1.2345678901234e+200
-(5 rows)
-
+ERROR:  unary_optr only support +/-, [optr_str=@]
 -- truncate
 SELECT f.f1, trunc(f.f1) AS trunc_f1
    FROM FLOAT8_TBL f order by 1;
-          f1          |       trunc_f1       
-----------------------+----------------------
-               -34.84 |                  -34
-                    0 |                    0
- 1.2345678901234e-200 |                    0
-               1004.3 |                 1004
- 1.2345678901234e+200 | 1.2345678901234e+200
-(5 rows)
-
+ERROR:  function trunc does not exist
 -- round
 SELECT f.f1, round(f.f1) AS round_f1
    FROM FLOAT8_TBL f order by 1;
-          f1          |       round_f1       
-----------------------+----------------------
-               -34.84 |                  -35
-                    0 |                    0
- 1.2345678901234e-200 |                    0
-               1004.3 |                 1004
- 1.2345678901234e+200 | 1.2345678901234e+200
-(5 rows)
-
+ERROR:  function round does not exist
 -- ceil / ceiling
 select ceil(f1) as ceil_f1 from float8_tbl f order by 1;
-       ceil_f1        
-----------------------
-                  -34
-                    0
-                    1
-                 1005
- 1.2345678901234e+200
-(5 rows)
-
+ERROR:  function ceil does not exist
 select ceiling(f1) as ceiling_f1 from float8_tbl f order by 1;
-      ceiling_f1      
-----------------------
-                  -34
-                    0
-                    1
-                 1005
- 1.2345678901234e+200
-(5 rows)
-
+ERROR:  function ceiling does not exist
 -- floor
 select floor(f1) as floor_f1 from float8_tbl f order by 1;
-       floor_f1       
-----------------------
-                  -35
-                    0
-                    0
-                 1004
- 1.2345678901234e+200
-(5 rows)
-
+ERROR:  function floor does not exist
 -- sign
 select sign(f1) as sign_f1 from float8_tbl f order by 1;
- sign_f1 
----------
-      -1
-       0
-       1
-       1
-       1
-(5 rows)
-
+ERROR:  function sign does not exist
 -- avoid bit-exact output here because operations may not be bit-exact.
 SET extra_float_digits = 0;
+ERROR:  only support select and create table statement
 -- square root
 SELECT sqrt(float8 '64') AS eight;
- eight 
--------
-     8
-(1 row)
-
+ERROR:  function sqrt does not exist
 SELECT |/ float8 '64' AS eight;
- eight 
--------
-     8
-(1 row)
-
+ERROR:  unary_optr only support +/-, [optr_str=|/]
 SELECT f.f1, |/f.f1 AS sqrt_f1
    FROM FLOAT8_TBL f
    WHERE f.f1 > '0.0' order by 1;
-          f1          |        sqrt_f1        
-----------------------+-----------------------
- 1.2345678901234e-200 | 1.11111110611109e-100
-               1004.3 |      31.6906926399535
- 1.2345678901234e+200 | 1.11111110611109e+100
-(3 rows)
-
+ERROR:  unary_optr only support +/-, [optr_str=|/]
 -- power
 SELECT power(float8 '144', float8 '0.5');
- power 
--------
-    12
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 'NaN', float8 '0.5');
- power 
--------
-   NaN
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '144', float8 'NaN');
- power 
--------
-   NaN
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 'NaN', float8 'NaN');
- power 
--------
-   NaN
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-1', float8 'NaN');
- power 
--------
-   NaN
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '1', float8 'NaN');
- power 
--------
-     1
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 'NaN', float8 '0');
- power 
--------
-     1
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 'inf', float8 '0');
- power 
--------
-     1
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-inf', float8 '0');
- power 
--------
-     1
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '0', float8 'inf');
- power 
--------
-     0
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '0', float8 '-inf');
-ERROR:  zero raised to a negative power is undefined
+ERROR:  function power does not exist
 SELECT power(float8 '1', float8 'inf');
- power 
--------
-     1
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '1', float8 '-inf');
- power 
--------
-     1
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-1', float8 'inf');
- power 
--------
-     1
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-1', float8 '-inf');
- power 
--------
-     1
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '0.1', float8 'inf');
- power 
--------
-     0
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-0.1', float8 'inf');
- power 
--------
-     0
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '1.1', float8 'inf');
-  power   
-----------
- Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-1.1', float8 'inf');
-  power   
-----------
- Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '0.1', float8 '-inf');
-  power   
-----------
- Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-0.1', float8 '-inf');
-  power   
-----------
- Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '1.1', float8 '-inf');
- power 
--------
-     0
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-1.1', float8 '-inf');
- power 
--------
-     0
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 'inf', float8 '-2');
- power 
--------
-     0
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 'inf', float8 '2');
-  power   
-----------
- Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 'inf', float8 'inf');
-  power   
-----------
- Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 'inf', float8 '-inf');
- power 
--------
-     0
-(1 row)
-
+ERROR:  function power does not exist
 -- Intel's icc misoptimizes the code that controls the sign of this result,
 -- even with -mp1.  Pending a fix for that, only test for "is it zero".
 SELECT power(float8 '-inf', float8 '-2') = '0';
- ?column? 
-----------
- t
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-inf', float8 '-3');
- power 
--------
-    -0
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-inf', float8 '2');
-  power   
-----------
- Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-inf', float8 '3');
-   power   
------------
- -Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-inf', float8 '3.5');
-ERROR:  a negative number raised to a non-integer power yields a complex result
+ERROR:  function power does not exist
 SELECT power(float8 '-inf', float8 'inf');
-  power   
-----------
- Infinity
-(1 row)
-
+ERROR:  function power does not exist
 SELECT power(float8 '-inf', float8 '-inf');
- power 
--------
-     0
-(1 row)
-
+ERROR:  function power does not exist
 -- take exp of ln(f.f1)
 SELECT f.f1, exp(ln(f.f1)) AS exp_ln_f1
    FROM FLOAT8_TBL f
    WHERE f.f1 > '0.0' order by 1;
-          f1          |       exp_ln_f1       
-----------------------+-----------------------
- 1.2345678901234e-200 | 1.23456789012339e-200
-               1004.3 |                1004.3
- 1.2345678901234e+200 | 1.23456789012338e+200
-(3 rows)
-
+ERROR:  function exp does not exist
 -- check edge cases for exp
 SELECT exp('inf'::float8), exp('-inf'::float8), exp('nan'::float8);
-   exp    | exp | exp 
-----------+-----+-----
- Infinity |   0 | NaN
-(1 row)
-
+ERROR:  function exp does not exist
 -- cube root
 SELECT ||/ float8 '27' AS three;
- three 
--------
-     3
-(1 row)
-
+ERROR:  unary_optr only support +/-, [optr_str=||/]
 SELECT f.f1, ||/f.f1 AS cbrt_f1 FROM FLOAT8_TBL f order by 1;
-          f1          |       cbrt_f1        
-----------------------+----------------------
-               -34.84 |    -3.26607421344208
-                    0 |                    0
- 1.2345678901234e-200 |  2.3112042409018e-67
-               1004.3 |      10.014312837827
- 1.2345678901234e+200 | 4.97933859234765e+66
-(5 rows)
-
+ERROR:  unary_optr only support +/-, [optr_str=||/]
 SELECT * FROM FLOAT8_TBL order by 1;
-          f1          
-----------------------
-               -34.84
-                    0
- 1.2345678901234e-200
-               1004.3
- 1.2345678901234e+200
-(5 rows)
+          f1           
+-----------------------
+ -1.2345678901234e+200
+               -1004.3
+                -34.84
+                -34.84
+ -1.2345678901234e-200
+                     0
+                     0
+  1.2345678901234e-200
+                1004.3
+  1.2345678901234e+200
+(10 rows)
 
 UPDATE FLOAT8_TBL
    SET f1 = FLOAT8_TBL.f1 * '-1'
    WHERE FLOAT8_TBL.f1 > '0.0';
+ERROR:  only support select and create table statement
 SELECT f.f1 * '1e200' from FLOAT8_TBL f order by 1;
-ERROR:  value out of range: overflow
+         ?column?         
+--------------------------
+                     -inf
+ -1.0042999999999999e+203
+              -3.484e+201
+              -3.484e+201
+         -1.2345678901234
+                        0
+                        0
+          1.2345678901234
+  1.0042999999999999e+203
+                      inf
+(10 rows)
+
 SELECT f.f1 ^ '1e200' from FLOAT8_TBL f order by 1;
-ERROR:  value out of range: overflow
+ERROR:  binary_optr only support binary optr = [optr_str=^]
 SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5;
- ?column? 
-----------
-        2
-(1 row)
-
+ERROR:  binary_optr only support binary optr = [optr_str=^]
 SELECT ln(f.f1) from FLOAT8_TBL f where f.f1 = '0.0'  order by 1;
-ERROR:  cannot take logarithm of zero
+ERROR:  function ln does not exist
 SELECT ln(f.f1) from FLOAT8_TBL f where f.f1 < '0.0'  order by 1;
-ERROR:  cannot take logarithm of a negative number
+ERROR:  function ln does not exist
 SELECT exp(f.f1) from FLOAT8_TBL f order by 1;
-ERROR:  value out of range: underflow
+ERROR:  function exp does not exist
 SELECT f.f1 / '0.0' from FLOAT8_TBL f order by 1;
-ERROR:  division by zero
+ERROR:  div zero [func=func_14505943978776108846]
 SELECT * FROM FLOAT8_TBL order by 1;
           f1           
 -----------------------
  -1.2345678901234e+200
                -1004.3
                 -34.84
+                -34.84
  -1.2345678901234e-200
                      0
-(5 rows)
+                     0
+  1.2345678901234e-200
+                1004.3
+  1.2345678901234e+200
+(10 rows)
 
 -- hyperbolic functions
 -- we run these with extra_float_digits = 0 too, since different platforms
 -- tend to produce results that vary in the last place.
 SELECT sinh(float8 '1');
-      sinh       
------------------
- 1.1752011936438
-(1 row)
-
+ERROR:  function sinh does not exist
 SELECT cosh(float8 '1');
-       cosh       
-------------------
- 1.54308063481524
-(1 row)
-
+ERROR:  function cosh does not exist
 SELECT tanh(float8 '1');
-       tanh        
--------------------
- 0.761594155955765
-(1 row)
-
+ERROR:  function tanh does not exist
 SELECT asinh(float8 '1');
-       asinh       
--------------------
- 0.881373587019543
-(1 row)
-
+ERROR:  function asinh does not exist
 SELECT acosh(float8 '2');
-      acosh       
-------------------
- 1.31695789692482
-(1 row)
-
+ERROR:  function acosh does not exist
 SELECT atanh(float8 '0.5');
-       atanh       
--------------------
- 0.549306144334055
-(1 row)
-
+ERROR:  function atanh does not exist
 -- test Inf/NaN cases for hyperbolic functions
 SELECT sinh(float8 'infinity');
-   sinh   
-----------
- Infinity
-(1 row)
-
+ERROR:  function sinh does not exist
 SELECT sinh(float8 '-infinity');
-   sinh    
------------
- -Infinity
-(1 row)
-
+ERROR:  function sinh does not exist
 SELECT sinh(float8 'nan');
- sinh 
-------
-  NaN
-(1 row)
-
+ERROR:  function sinh does not exist
 SELECT cosh(float8 'infinity');
-   cosh   
-----------
- Infinity
-(1 row)
-
+ERROR:  function cosh does not exist
 SELECT cosh(float8 '-infinity');
-   cosh   
-----------
- Infinity
-(1 row)
-
+ERROR:  function cosh does not exist
 SELECT cosh(float8 'nan');
- cosh 
-------
-  NaN
-(1 row)
-
+ERROR:  function cosh does not exist
 SELECT tanh(float8 'infinity');
- tanh 
-------
-    1
-(1 row)
-
+ERROR:  function tanh does not exist
 SELECT tanh(float8 '-infinity');
- tanh 
-------
-   -1
-(1 row)
-
+ERROR:  function tanh does not exist
 SELECT tanh(float8 'nan');
- tanh 
-------
-  NaN
-(1 row)
-
+ERROR:  function tanh does not exist
 SELECT asinh(float8 'infinity');
-  asinh   
-----------
- Infinity
-(1 row)
-
+ERROR:  function asinh does not exist
 SELECT asinh(float8 '-infinity');
-   asinh   
------------
- -Infinity
-(1 row)
-
+ERROR:  function asinh does not exist
 SELECT asinh(float8 'nan');
- asinh 
--------
-   NaN
-(1 row)
-
+ERROR:  function asinh does not exist
 -- acosh(Inf) should be Inf, but some mingw versions produce NaN, so skip test
 -- SELECT acosh(float8 'infinity');
 SELECT acosh(float8 '-infinity');
-ERROR:  input is out of range
+ERROR:  function acosh does not exist
 SELECT acosh(float8 'nan');
- acosh 
--------
-   NaN
-(1 row)
-
+ERROR:  function acosh does not exist
 SELECT atanh(float8 'infinity');
-ERROR:  input is out of range
+ERROR:  function atanh does not exist
 SELECT atanh(float8 '-infinity');
-ERROR:  input is out of range
+ERROR:  function atanh does not exist
 SELECT atanh(float8 'nan');
- atanh 
--------
-   NaN
-(1 row)
-
+ERROR:  function atanh does not exist
 -- error functions
 -- we run these with extra_float_digits = -1, to get consistently rounded
 -- results on all platforms.
 SET extra_float_digits = -1;
+ERROR:  only support select and create table statement
 SELECT x,
        erf(x),
        erfc(x)
@@ -773,43 +510,20 @@
       (1.2e-17), (2.3e-13), (1.2e-9),
       (0.45), (1.1), (2.1), (3.4), (6), (28),
       (float8 'infinity'), (float8 'nan')) AS t(x);
-     x     |         erf          |        erfc         
------------+----------------------+---------------------
- -Infinity |                   -1 |                   2
-       -28 |                   -1 |                   2
-        -6 |                   -1 |                   2
-      -3.4 |    -0.99999847800664 |     1.9999984780066
-      -2.1 |    -0.99702053334367 |     1.9970205333437
-      -1.1 |    -0.88020506957408 |     1.8802050695741
-     -0.45 |    -0.47548171978692 |     1.4754817197869
-  -1.2e-09 | -1.3540550005146e-09 |     1.0000000013541
-  -2.3e-13 | -2.5952720843197e-13 |     1.0000000000003
-  -1.2e-17 | -1.3540550005146e-17 |                   1
-         0 |                    0 |                   1
-   1.2e-17 |  1.3540550005146e-17 |                   1
-   2.3e-13 |  2.5952720843197e-13 |    0.99999999999974
-   1.2e-09 |  1.3540550005146e-09 |    0.99999999864595
-      0.45 |     0.47548171978692 |    0.52451828021308
-       1.1 |     0.88020506957408 |    0.11979493042592
-       2.1 |     0.99702053334367 |   0.002979466656333
-       3.4 |     0.99999847800664 | 1.5219933628623e-06
-         6 |                    1 | 2.1519736712499e-17
-        28 |                    1 |                   0
-  Infinity |                    1 |                   0
-       NaN |                  NaN |                 NaN
-(22 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 RESET extra_float_digits;
+ERROR:  only support select and create table statement
 -- test for over- and underflow
 INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
-ERROR:  "10e400" is out of range for type double precision
+ERROR:  value "10e400" is out of range for type floating
 INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
-ERROR:  "-10e400" is out of range for type double precision
+ERROR:  value "-10e400" is out of range for type floating
 INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
-ERROR:  "10e-400" is out of range for type double precision
+ERROR:  value "10e-400" is out of range for type floating
 INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
-ERROR:  "-10e-400" is out of range for type double precision
+ERROR:  value "-10e-400" is out of range for type floating
 DROP TABLE FLOAT8_TBL;
+ERROR:  only support select and create table statement
 -- Check the float8 values exported for use by other tests
 SELECT * FROM FLOAT8_TBL order by 1;
           f1           
@@ -817,96 +531,89 @@
  -1.2345678901234e+200
                -1004.3
                 -34.84
+                -34.84
  -1.2345678901234e-200
                      0
-(5 rows)
+                     0
+  1.2345678901234e-200
+                1004.3
+  1.2345678901234e+200
+(10 rows)
 
 -- test edge-case coercions to integer
 SELECT '32767.4'::float8::int2;
- int2  
--------
- 32767
+ ?column? 
+----------
+    32767
 (1 row)
 
 SELECT '32767.6'::float8::int2;
-ERROR:  smallint out of range
+ ?column? 
+----------
+    32767
+(1 row)
+
 SELECT '-32768.4'::float8::int2;
-  int2  
---------
- -32768
+ ?column? 
+----------
+   -32768
 (1 row)
 
 SELECT '-32768.6'::float8::int2;
-ERROR:  smallint out of range
+ ?column? 
+----------
+   -32768
+(1 row)
+
 SELECT '2147483647.4'::float8::int4;
-    int4    
+  ?column?  
 ------------
  2147483647
 (1 row)
 
 SELECT '2147483647.6'::float8::int4;
-ERROR:  integer out of range
+  ?column?  
+------------
+ 2147483647
+(1 row)
+
 SELECT '-2147483648.4'::float8::int4;
-    int4     
+  ?column?   
 -------------
  -2147483648
 (1 row)
 
 SELECT '-2147483648.6'::float8::int4;
-ERROR:  integer out of range
+  ?column?   
+-------------
+ -2147483648
+(1 row)
+
 SELECT '9223372036854773760'::float8::int8;
-        int8         
+      ?column?       
 ---------------------
  9223372036854773760
 (1 row)
 
 SELECT '9223372036854775807'::float8::int8;
-ERROR:  bigint out of range
+ERROR:  long out of range
 SELECT '-9223372036854775808.5'::float8::int8;
-         int8         
-----------------------
- -9223372036854775808
-(1 row)
-
+ERROR:  long out of range
 SELECT '-9223372036854780000'::float8::int8;
-ERROR:  bigint out of range
+ERROR:  long out of range
 -- test exact cases for trigonometric functions in degrees
 SELECT x,
        sind(x),
        sind(x) IN (-1,-0.5,0,0.5,1) AS sind_exact
 FROM (VALUES (0), (30), (90), (150), (180),
       (210), (270), (330), (360)) AS t(x);
-  x  | sind | sind_exact 
------+------+------------
-   0 |    0 | t
-  30 |  0.5 | t
-  90 |    1 | t
- 150 |  0.5 | t
- 180 |    0 | t
- 210 | -0.5 | t
- 270 |   -1 | t
- 330 | -0.5 | t
- 360 |    0 | t
-(9 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT x,
        cosd(x),
        cosd(x) IN (-1,-0.5,0,0.5,1) AS cosd_exact
 FROM (VALUES (0), (60), (90), (120), (180),
       (240), (270), (300), (360)) AS t(x);
-  x  | cosd | cosd_exact 
------+------+------------
-   0 |    1 | t
-  60 |  0.5 | t
-  90 |    0 | t
- 120 | -0.5 | t
- 180 |   -1 | t
- 240 | -0.5 | t
- 270 |    0 | t
- 300 |  0.5 | t
- 360 |    1 | t
-(9 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT x,
        tand(x),
        tand(x) IN ('-Infinity'::float8,-1,0,
@@ -916,79 +623,49 @@
                    1,'Infinity'::float8) AS cotd_exact
 FROM (VALUES (0), (45), (90), (135), (180),
       (225), (270), (315), (360)) AS t(x);
-  x  |   tand    | tand_exact |   cotd    | cotd_exact 
------+-----------+------------+-----------+------------
-   0 |         0 | t          |  Infinity | t
-  45 |         1 | t          |         1 | t
-  90 |  Infinity | t          |         0 | t
- 135 |        -1 | t          |        -1 | t
- 180 |         0 | t          | -Infinity | t
- 225 |         1 | t          |         1 | t
- 270 | -Infinity | t          |         0 | t
- 315 |        -1 | t          |        -1 | t
- 360 |         0 | t          |  Infinity | t
-(9 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT x,
        asind(x),
        asind(x) IN (-90,-30,0,30,90) AS asind_exact,
        acosd(x),
        acosd(x) IN (0,60,90,120,180) AS acosd_exact
 FROM (VALUES (-1), (-0.5), (0), (0.5), (1)) AS t(x);
-  x   | asind | asind_exact | acosd | acosd_exact 
-------+-------+-------------+-------+-------------
-   -1 |   -90 | t           |   180 | t
- -0.5 |   -30 | t           |   120 | t
-    0 |     0 | t           |    90 | t
-  0.5 |    30 | t           |    60 | t
-    1 |    90 | t           |     0 | t
-(5 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT x,
        atand(x),
        atand(x) IN (-90,-45,0,45,90) AS atand_exact
 FROM (VALUES ('-Infinity'::float8), (-1), (0), (1),
       ('Infinity'::float8)) AS t(x);
-     x     | atand | atand_exact 
------------+-------+-------------
- -Infinity |   -90 | t
-        -1 |   -45 | t
-         0 |     0 | t
-         1 |    45 | t
-  Infinity |    90 | t
-(5 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 SELECT x, y,
        atan2d(y, x),
        atan2d(y, x) IN (-90,0,90,180) AS atan2d_exact
 FROM (SELECT 10*cosd(a), 10*sind(a)
       FROM generate_series(0, 360, 90) AS t(a)) AS t(x,y);
-  x  |  y  | atan2d | atan2d_exact 
------+-----+--------+--------------
-  10 |   0 |      0 | t
-   0 |  10 |     90 | t
- -10 |   0 |    180 | t
-   0 | -10 |    -90 | t
-  10 |   0 |      0 | t
-(5 rows)
-
+ERROR:  function generate_series does not exist
 --
 -- test output (and round-trip safety) of various values.
 -- To ensure we're testing what we think we're testing, start with
 -- float values specified by bit patterns (as a useful side effect,
 -- this means we'll fail on non-IEEE platforms).
 create type xfloat8;
+ERROR:  only support select and create table statement
 create function xfloat8in(cstring) returns xfloat8 immutable strict
   language internal as 'int8in';
-NOTICE:  return type xfloat8 is only a shell
+ERROR:  only support select and create table statement
 create function xfloat8out(xfloat8) returns cstring immutable strict
   language internal as 'int8out';
-NOTICE:  argument type xfloat8 is only a shell
+ERROR:  only support select and create table statement
 create type xfloat8 (input = xfloat8in, output = xfloat8out, like = float8);
+ERROR:  only support select and create table statement
 create cast (xfloat8 as float8) without function;
+ERROR:  only support select and create table statement
 create cast (float8 as xfloat8) without function;
+ERROR:  only support select and create table statement
 create cast (xfloat8 as bigint) without function;
+ERROR:  only support select and create table statement
 create cast (bigint as xfloat8) without function;
+ERROR:  only support select and create table statement
 -- float8: seeeeeee eeeeeeee eeeeeeee mmmmmmmm mmmmmmmm(x4)
 -- we don't care to assume the platform's strtod() handles subnormals
 -- correctly; those are "use at your own risk". However we do test
@@ -1013,28 +690,7 @@
   from (select bits::bigint::xfloat8::float8 as flt
           from testdata
 	offset 0) s;
-       ibits        |           flt           
---------------------+-------------------------
- \x0000000000000001 |                  5e-324
- \x0000000000000002 |                  1e-323
- \x0000000000000003 |                1.5e-323
- \x0000000000001000 |             2.0237e-320
- \x0000000100000000 |        2.121995791e-314
- \x0000010000000000 |      5.43230922487e-312
- \x0000010100000000 |      5.45352918278e-312
- \x0000400000000000 |    3.4766779039175e-310
- \x0000400100000000 |    3.4768901034966e-310
- \x0000800000000000 |     6.953355807835e-310
- \x0000800000000001 |   6.95335580783505e-310
- \x00000000000f4240 |           4.940656e-318
- \x00000000016e3600 |         1.18575755e-316
- \x0000008cdcdea440 |     2.989102097996e-312
- \x000ffffffffffff0 | 2.2250738585071935e-308
- \x000ffffffffffff1 |  2.225073858507194e-308
- \x000ffffffffffffe | 2.2250738585072004e-308
- \x000fffffffffffff |  2.225073858507201e-308
-(18 rows)
-
+ERROR:  clapdb doesn't support CTE currently
 -- round-trip tests
 with testdata(bits) as (values
   (x'0000000000000000'),
@@ -1182,225 +838,7 @@
   from (select bits::bigint::xfloat8::float8 as flt
           from testdata
 	offset 0) s;
-       ibits        |           flt           |          r_flt          |       obits        | correct 
---------------------+-------------------------+-------------------------+--------------------+---------
- \x0000000000000000 |                       0 |                       0 | \x0000000000000000 | t
- \x0010000000000000 | 2.2250738585072014e-308 | 2.2250738585072014e-308 | \x0010000000000000 | t
- \x0010000000000001 |  2.225073858507202e-308 |  2.225073858507202e-308 | \x0010000000000001 | t
- \x0010000000000002 | 2.2250738585072024e-308 | 2.2250738585072024e-308 | \x0010000000000002 | t
- \x0018000000000000 |  3.337610787760802e-308 |  3.337610787760802e-308 | \x0018000000000000 | t
- \x3ddb7cdfd9d7bdba |   9.999999999999999e-11 |   9.999999999999999e-11 | \x3ddb7cdfd9d7bdba | t
- \x3ddb7cdfd9d7bdbb |                   1e-10 |                   1e-10 | \x3ddb7cdfd9d7bdbb | t
- \x3ddb7cdfd9d7bdbc |  1.0000000000000002e-10 |  1.0000000000000002e-10 | \x3ddb7cdfd9d7bdbc | t
- \x3e112e0be826d694 |   9.999999999999999e-10 |   9.999999999999999e-10 | \x3e112e0be826d694 | t
- \x3e112e0be826d695 |                   1e-09 |                   1e-09 | \x3e112e0be826d695 | t
- \x3e112e0be826d696 |  1.0000000000000003e-09 |  1.0000000000000003e-09 | \x3e112e0be826d696 | t
- \x3e45798ee2308c39 |   9.999999999999999e-09 |   9.999999999999999e-09 | \x3e45798ee2308c39 | t
- \x3e45798ee2308c3a |                   1e-08 |                   1e-08 | \x3e45798ee2308c3a | t
- \x3e45798ee2308c3b |  1.0000000000000002e-08 |  1.0000000000000002e-08 | \x3e45798ee2308c3b | t
- \x3e7ad7f29abcaf47 |   9.999999999999998e-08 |   9.999999999999998e-08 | \x3e7ad7f29abcaf47 | t
- \x3e7ad7f29abcaf48 |                   1e-07 |                   1e-07 | \x3e7ad7f29abcaf48 | t
- \x3e7ad7f29abcaf49 |  1.0000000000000001e-07 |  1.0000000000000001e-07 | \x3e7ad7f29abcaf49 | t
- \x3eb0c6f7a0b5ed8c |   9.999999999999997e-07 |   9.999999999999997e-07 | \x3eb0c6f7a0b5ed8c | t
- \x3eb0c6f7a0b5ed8d |                   1e-06 |                   1e-06 | \x3eb0c6f7a0b5ed8d | t
- \x3eb0c6f7a0b5ed8e |  1.0000000000000002e-06 |  1.0000000000000002e-06 | \x3eb0c6f7a0b5ed8e | t
- \x3ee4f8b588e368ef |   9.999999999999997e-06 |   9.999999999999997e-06 | \x3ee4f8b588e368ef | t
- \x3ee4f8b588e368f0 |   9.999999999999999e-06 |   9.999999999999999e-06 | \x3ee4f8b588e368f0 | t
- \x3ee4f8b588e368f1 |                   1e-05 |                   1e-05 | \x3ee4f8b588e368f1 | t
- \x3f1a36e2eb1c432c |   9.999999999999999e-05 |   9.999999999999999e-05 | \x3f1a36e2eb1c432c | t
- \x3f1a36e2eb1c432d |                  0.0001 |                  0.0001 | \x3f1a36e2eb1c432d | t
- \x3f1a36e2eb1c432e |  0.00010000000000000002 |  0.00010000000000000002 | \x3f1a36e2eb1c432e | t
- \x3f50624dd2f1a9fb |   0.0009999999999999998 |   0.0009999999999999998 | \x3f50624dd2f1a9fb | t
- \x3f50624dd2f1a9fc |                   0.001 |                   0.001 | \x3f50624dd2f1a9fc | t
- \x3f50624dd2f1a9fd |   0.0010000000000000002 |   0.0010000000000000002 | \x3f50624dd2f1a9fd | t
- \x3f847ae147ae147a |    0.009999999999999998 |    0.009999999999999998 | \x3f847ae147ae147a | t
- \x3f847ae147ae147b |                    0.01 |                    0.01 | \x3f847ae147ae147b | t
- \x3f847ae147ae147c |    0.010000000000000002 |    0.010000000000000002 | \x3f847ae147ae147c | t
- \x3fb9999999999999 |     0.09999999999999999 |     0.09999999999999999 | \x3fb9999999999999 | t
- \x3fb999999999999a |                     0.1 |                     0.1 | \x3fb999999999999a | t
- \x3fb999999999999b |     0.10000000000000002 |     0.10000000000000002 | \x3fb999999999999b | t
- \x3feffffffffffff0 |      0.9999999999999982 |      0.9999999999999982 | \x3feffffffffffff0 | t
- \x3feffffffffffff1 |      0.9999999999999983 |      0.9999999999999983 | \x3feffffffffffff1 | t
- \x3feffffffffffff2 |      0.9999999999999984 |      0.9999999999999984 | \x3feffffffffffff2 | t
- \x3feffffffffffff3 |      0.9999999999999986 |      0.9999999999999986 | \x3feffffffffffff3 | t
- \x3feffffffffffff4 |      0.9999999999999987 |      0.9999999999999987 | \x3feffffffffffff4 | t
- \x3feffffffffffff5 |      0.9999999999999988 |      0.9999999999999988 | \x3feffffffffffff5 | t
- \x3feffffffffffff6 |      0.9999999999999989 |      0.9999999999999989 | \x3feffffffffffff6 | t
- \x3feffffffffffff7 |       0.999999999999999 |       0.999999999999999 | \x3feffffffffffff7 | t
- \x3feffffffffffff8 |      0.9999999999999991 |      0.9999999999999991 | \x3feffffffffffff8 | t
- \x3feffffffffffff9 |      0.9999999999999992 |      0.9999999999999992 | \x3feffffffffffff9 | t
- \x3feffffffffffffa |      0.9999999999999993 |      0.9999999999999993 | \x3feffffffffffffa | t
- \x3feffffffffffffb |      0.9999999999999994 |      0.9999999999999994 | \x3feffffffffffffb | t
- \x3feffffffffffffc |      0.9999999999999996 |      0.9999999999999996 | \x3feffffffffffffc | t
- \x3feffffffffffffd |      0.9999999999999997 |      0.9999999999999997 | \x3feffffffffffffd | t
- \x3feffffffffffffe |      0.9999999999999998 |      0.9999999999999998 | \x3feffffffffffffe | t
- \x3fefffffffffffff |      0.9999999999999999 |      0.9999999999999999 | \x3fefffffffffffff | t
- \x3ff0000000000000 |                       1 |                       1 | \x3ff0000000000000 | t
- \x3ff0000000000001 |      1.0000000000000002 |      1.0000000000000002 | \x3ff0000000000001 | t
- \x3ff0000000000002 |      1.0000000000000004 |      1.0000000000000004 | \x3ff0000000000002 | t
- \x3ff0000000000003 |      1.0000000000000007 |      1.0000000000000007 | \x3ff0000000000003 | t
- \x3ff0000000000004 |      1.0000000000000009 |      1.0000000000000009 | \x3ff0000000000004 | t
- \x3ff0000000000005 |       1.000000000000001 |       1.000000000000001 | \x3ff0000000000005 | t
- \x3ff0000000000006 |      1.0000000000000013 |      1.0000000000000013 | \x3ff0000000000006 | t
- \x3ff0000000000007 |      1.0000000000000016 |      1.0000000000000016 | \x3ff0000000000007 | t
- \x3ff0000000000008 |      1.0000000000000018 |      1.0000000000000018 | \x3ff0000000000008 | t
- \x3ff0000000000009 |       1.000000000000002 |       1.000000000000002 | \x3ff0000000000009 | t
- \x3ff921fb54442d18 |      1.5707963267948966 |      1.5707963267948966 | \x3ff921fb54442d18 | t
- \x4005bf0a8b14576a |      2.7182818284590455 |      2.7182818284590455 | \x4005bf0a8b14576a | t
- \x400921fb54442d18 |       3.141592653589793 |       3.141592653589793 | \x400921fb54442d18 | t
- \x4023ffffffffffff |       9.999999999999998 |       9.999999999999998 | \x4023ffffffffffff | t
- \x4024000000000000 |                      10 |                      10 | \x4024000000000000 | t
- \x4024000000000001 |      10.000000000000002 |      10.000000000000002 | \x4024000000000001 | t
- \x4058ffffffffffff |       99.99999999999999 |       99.99999999999999 | \x4058ffffffffffff | t
- \x4059000000000000 |                     100 |                     100 | \x4059000000000000 | t
- \x4059000000000001 |      100.00000000000001 |      100.00000000000001 | \x4059000000000001 | t
- \x408f3fffffffffff |       999.9999999999999 |       999.9999999999999 | \x408f3fffffffffff | t
- \x408f400000000000 |                    1000 |                    1000 | \x408f400000000000 | t
- \x408f400000000001 |      1000.0000000000001 |      1000.0000000000001 | \x408f400000000001 | t
- \x40c387ffffffffff |       9999.999999999998 |       9999.999999999998 | \x40c387ffffffffff | t
- \x40c3880000000000 |                   10000 |                   10000 | \x40c3880000000000 | t
- \x40c3880000000001 |      10000.000000000002 |      10000.000000000002 | \x40c3880000000001 | t
- \x40f869ffffffffff |       99999.99999999999 |       99999.99999999999 | \x40f869ffffffffff | t
- \x40f86a0000000000 |                  100000 |                  100000 | \x40f86a0000000000 | t
- \x40f86a0000000001 |      100000.00000000001 |      100000.00000000001 | \x40f86a0000000001 | t
- \x412e847fffffffff |       999999.9999999999 |       999999.9999999999 | \x412e847fffffffff | t
- \x412e848000000000 |                 1000000 |                 1000000 | \x412e848000000000 | t
- \x412e848000000001 |      1000000.0000000001 |      1000000.0000000001 | \x412e848000000001 | t
- \x416312cfffffffff |       9999999.999999998 |       9999999.999999998 | \x416312cfffffffff | t
- \x416312d000000000 |                10000000 |                10000000 | \x416312d000000000 | t
- \x416312d000000001 |      10000000.000000002 |      10000000.000000002 | \x416312d000000001 | t
- \x4197d783ffffffff |       99999999.99999999 |       99999999.99999999 | \x4197d783ffffffff | t
- \x4197d78400000000 |               100000000 |               100000000 | \x4197d78400000000 | t
- \x4197d78400000001 |      100000000.00000001 |      100000000.00000001 | \x4197d78400000001 | t
- \x41cdcd64ffffffff |       999999999.9999999 |       999999999.9999999 | \x41cdcd64ffffffff | t
- \x41cdcd6500000000 |              1000000000 |              1000000000 | \x41cdcd6500000000 | t
- \x41cdcd6500000001 |      1000000000.0000001 |      1000000000.0000001 | \x41cdcd6500000001 | t
- \x4202a05f1fffffff |       9999999999.999998 |       9999999999.999998 | \x4202a05f1fffffff | t
- \x4202a05f20000000 |             10000000000 |             10000000000 | \x4202a05f20000000 | t
- \x4202a05f20000001 |      10000000000.000002 |      10000000000.000002 | \x4202a05f20000001 | t
- \x42374876e7ffffff |       99999999999.99998 |       99999999999.99998 | \x42374876e7ffffff | t
- \x42374876e8000000 |            100000000000 |            100000000000 | \x42374876e8000000 | t
- \x42374876e8000001 |      100000000000.00002 |      100000000000.00002 | \x42374876e8000001 | t
- \x426d1a94a1ffffff |       999999999999.9999 |       999999999999.9999 | \x426d1a94a1ffffff | t
- \x426d1a94a2000000 |           1000000000000 |           1000000000000 | \x426d1a94a2000000 | t
- \x426d1a94a2000001 |      1000000000000.0001 |      1000000000000.0001 | \x426d1a94a2000001 | t
- \x42a2309ce53fffff |       9999999999999.998 |       9999999999999.998 | \x42a2309ce53fffff | t
- \x42a2309ce5400000 |          10000000000000 |          10000000000000 | \x42a2309ce5400000 | t
- \x42a2309ce5400001 |      10000000000000.002 |      10000000000000.002 | \x42a2309ce5400001 | t
- \x42d6bcc41e8fffff |       99999999999999.98 |       99999999999999.98 | \x42d6bcc41e8fffff | t
- \x42d6bcc41e900000 |         100000000000000 |         100000000000000 | \x42d6bcc41e900000 | t
- \x42d6bcc41e900001 |      100000000000000.02 |      100000000000000.02 | \x42d6bcc41e900001 | t
- \x430c6bf52633ffff |       999999999999999.9 |       999999999999999.9 | \x430c6bf52633ffff | t
- \x430c6bf526340000 |                   1e+15 |                   1e+15 | \x430c6bf526340000 | t
- \x430c6bf526340001 |  1.0000000000000001e+15 |  1.0000000000000001e+15 | \x430c6bf526340001 | t
- \x4341c37937e07fff |   9.999999999999998e+15 |   9.999999999999998e+15 | \x4341c37937e07fff | t
- \x4341c37937e08000 |                   1e+16 |                   1e+16 | \x4341c37937e08000 | t
- \x4341c37937e08001 |  1.0000000000000002e+16 |  1.0000000000000002e+16 | \x4341c37937e08001 | t
- \x4376345785d89fff |   9.999999999999998e+16 |   9.999999999999998e+16 | \x4376345785d89fff | t
- \x4376345785d8a000 |                   1e+17 |                   1e+17 | \x4376345785d8a000 | t
- \x4376345785d8a001 |  1.0000000000000002e+17 |  1.0000000000000002e+17 | \x4376345785d8a001 | t
- \x43abc16d674ec7ff |   9.999999999999999e+17 |   9.999999999999999e+17 | \x43abc16d674ec7ff | t
- \x43abc16d674ec800 |                   1e+18 |                   1e+18 | \x43abc16d674ec800 | t
- \x43abc16d674ec801 |  1.0000000000000001e+18 |  1.0000000000000001e+18 | \x43abc16d674ec801 | t
- \x43e158e460913cff |   9.999999999999998e+18 |   9.999999999999998e+18 | \x43e158e460913cff | t
- \x43e158e460913d00 |                   1e+19 |                   1e+19 | \x43e158e460913d00 | t
- \x43e158e460913d01 |  1.0000000000000002e+19 |  1.0000000000000002e+19 | \x43e158e460913d01 | t
- \x4415af1d78b58c3f |   9.999999999999998e+19 |   9.999999999999998e+19 | \x4415af1d78b58c3f | t
- \x4415af1d78b58c40 |                   1e+20 |                   1e+20 | \x4415af1d78b58c40 | t
- \x4415af1d78b58c41 |  1.0000000000000002e+20 |  1.0000000000000002e+20 | \x4415af1d78b58c41 | t
- \x444b1ae4d6e2ef4f |   9.999999999999999e+20 |   9.999999999999999e+20 | \x444b1ae4d6e2ef4f | t
- \x444b1ae4d6e2ef50 |                   1e+21 |                   1e+21 | \x444b1ae4d6e2ef50 | t
- \x444b1ae4d6e2ef51 |  1.0000000000000001e+21 |  1.0000000000000001e+21 | \x444b1ae4d6e2ef51 | t
- \x4480f0cf064dd591 |   9.999999999999998e+21 |   9.999999999999998e+21 | \x4480f0cf064dd591 | t
- \x4480f0cf064dd592 |                   1e+22 |                   1e+22 | \x4480f0cf064dd592 | t
- \x4480f0cf064dd593 |  1.0000000000000002e+22 |  1.0000000000000002e+22 | \x4480f0cf064dd593 | t
- \x44b52d02c7e14af5 |   9.999999999999997e+22 |   9.999999999999997e+22 | \x44b52d02c7e14af5 | t
- \x44b52d02c7e14af6 |   9.999999999999999e+22 |   9.999999999999999e+22 | \x44b52d02c7e14af6 | t
- \x44b52d02c7e14af7 |  1.0000000000000001e+23 |  1.0000000000000001e+23 | \x44b52d02c7e14af7 | t
- \x44ea784379d99db3 |   9.999999999999998e+23 |   9.999999999999998e+23 | \x44ea784379d99db3 | t
- \x44ea784379d99db4 |                   1e+24 |                   1e+24 | \x44ea784379d99db4 | t
- \x44ea784379d99db5 |  1.0000000000000001e+24 |  1.0000000000000001e+24 | \x44ea784379d99db5 | t
- \x45208b2a2c280290 |   9.999999999999999e+24 |   9.999999999999999e+24 | \x45208b2a2c280290 | t
- \x45208b2a2c280291 |                   1e+25 |                   1e+25 | \x45208b2a2c280291 | t
- \x45208b2a2c280292 |  1.0000000000000003e+25 |  1.0000000000000003e+25 | \x45208b2a2c280292 | t
- \x7feffffffffffffe | 1.7976931348623155e+308 | 1.7976931348623155e+308 | \x7feffffffffffffe | t
- \x7fefffffffffffff | 1.7976931348623157e+308 | 1.7976931348623157e+308 | \x7fefffffffffffff | t
- \x4350000000000002 |  1.8014398509481992e+16 |  1.8014398509481992e+16 | \x4350000000000002 | t
- \x4350000000002e06 |  1.8014398509529112e+16 |  1.8014398509529112e+16 | \x4350000000002e06 | t
- \x4352000000000003 |  2.0266198323167244e+16 |  2.0266198323167244e+16 | \x4352000000000003 | t
- \x4352000000000004 |  2.0266198323167248e+16 |  2.0266198323167248e+16 | \x4352000000000004 | t
- \x4358000000000003 |  2.7021597764222988e+16 |  2.7021597764222988e+16 | \x4358000000000003 | t
- \x4358000000000004 |  2.7021597764222992e+16 |  2.7021597764222992e+16 | \x4358000000000004 | t
- \x435f000000000020 |  3.4902897112121472e+16 |  3.4902897112121472e+16 | \x435f000000000020 | t
- \xc350000000000002 | -1.8014398509481992e+16 | -1.8014398509481992e+16 | \xc350000000000002 | t
- \xc350000000002e06 | -1.8014398509529112e+16 | -1.8014398509529112e+16 | \xc350000000002e06 | t
- \xc352000000000003 | -2.0266198323167244e+16 | -2.0266198323167244e+16 | \xc352000000000003 | t
- \xc352000000000004 | -2.0266198323167248e+16 | -2.0266198323167248e+16 | \xc352000000000004 | t
- \xc358000000000003 | -2.7021597764222988e+16 | -2.7021597764222988e+16 | \xc358000000000003 | t
- \xc358000000000004 | -2.7021597764222992e+16 | -2.7021597764222992e+16 | \xc358000000000004 | t
- \xc35f000000000020 | -3.4902897112121472e+16 | -3.4902897112121472e+16 | \xc35f000000000020 | t
- \x42dc12218377de66 |       123456789012345.6 |       123456789012345.6 | \x42dc12218377de66 | t
- \x42a674e79c5fe51f |       12345678901234.56 |       12345678901234.56 | \x42a674e79c5fe51f | t
- \x4271f71fb04cb74c |       1234567890123.456 |       1234567890123.456 | \x4271f71fb04cb74c | t
- \x423cbe991a145879 |       123456789012.3456 |       123456789012.3456 | \x423cbe991a145879 | t
- \x4206fee0e1a9e061 |       12345678901.23456 |       12345678901.23456 | \x4206fee0e1a9e061 | t
- \x41d26580b487e6b4 |       1234567890.123456 |       1234567890.123456 | \x41d26580b487e6b4 | t
- \x419d6f34540ca453 |       123456789.0123456 |       123456789.0123456 | \x419d6f34540ca453 | t
- \x41678c29dcd6e9dc |       12345678.90123456 |       12345678.90123456 | \x41678c29dcd6e9dc | t
- \x4132d687e3df217d |       1234567.890123456 |       1234567.890123456 | \x4132d687e3df217d | t
- \x40fe240c9fcb68c8 |       123456.7890123456 |       123456.7890123456 | \x40fe240c9fcb68c8 | t
- \x40c81cd6e63c53d3 |       12345.67890123456 |       12345.67890123456 | \x40c81cd6e63c53d3 | t
- \x40934a4584fd0fdc |       1234.567890123456 |       1234.567890123456 | \x40934a4584fd0fdc | t
- \x405edd3c07fb4c93 |       123.4567890123456 |       123.4567890123456 | \x405edd3c07fb4c93 | t
- \x4028b0fcd32f7076 |       12.34567890123456 |       12.34567890123456 | \x4028b0fcd32f7076 | t
- \x3ff3c0ca428c59f8 |       1.234567890123456 |       1.234567890123456 | \x3ff3c0ca428c59f8 | t
- \x3e60000000000000 |  2.9802322387695312e-08 |  2.9802322387695312e-08 | \x3e60000000000000 | t
- \xc352bd2668e077c4 | -2.1098088986959632e+16 | -2.1098088986959632e+16 | \xc352bd2668e077c4 | t
- \x434018601510c000 |     9.0608011534336e+15 |     9.0608011534336e+15 | \x434018601510c000 | t
- \x43d055dc36f24000 |   4.708356024711512e+18 |   4.708356024711512e+18 | \x43d055dc36f24000 | t
- \x43e052961c6f8000 |   9.409340012568248e+18 |   9.409340012568248e+18 | \x43e052961c6f8000 | t
- \x3ff3c0ca2a5b1d5d |               1.2345678 |               1.2345678 | \x3ff3c0ca2a5b1d5d | t
- \x4830f0cf064dd592 |   5.764607523034235e+39 |   5.764607523034235e+39 | \x4830f0cf064dd592 | t
- \x4840f0cf064dd592 |   1.152921504606847e+40 |   1.152921504606847e+40 | \x4840f0cf064dd592 | t
- \x4850f0cf064dd592 |   2.305843009213694e+40 |   2.305843009213694e+40 | \x4850f0cf064dd592 | t
- \x3ff3333333333333 |                     1.2 |                     1.2 | \x3ff3333333333333 | t
- \x3ff3ae147ae147ae |                    1.23 |                    1.23 | \x3ff3ae147ae147ae | t
- \x3ff3be76c8b43958 |                   1.234 |                   1.234 | \x3ff3be76c8b43958 | t
- \x3ff3c083126e978d |                  1.2345 |                  1.2345 | \x3ff3c083126e978d | t
- \x3ff3c0c1fc8f3238 |                 1.23456 |                 1.23456 | \x3ff3c0c1fc8f3238 | t
- \x3ff3c0c9539b8887 |                1.234567 |                1.234567 | \x3ff3c0c9539b8887 | t
- \x3ff3c0ca2a5b1d5d |               1.2345678 |               1.2345678 | \x3ff3c0ca2a5b1d5d | t
- \x3ff3c0ca4283de1b |              1.23456789 |              1.23456789 | \x3ff3c0ca4283de1b | t
- \x3ff3c0ca43db770a |             1.234567895 |             1.234567895 | \x3ff3c0ca43db770a | t
- \x3ff3c0ca428abd53 |            1.2345678901 |            1.2345678901 | \x3ff3c0ca428abd53 | t
- \x3ff3c0ca428c1d2b |           1.23456789012 |           1.23456789012 | \x3ff3c0ca428c1d2b | t
- \x3ff3c0ca428c51f2 |          1.234567890123 |          1.234567890123 | \x3ff3c0ca428c51f2 | t
- \x3ff3c0ca428c58fc |         1.2345678901234 |         1.2345678901234 | \x3ff3c0ca428c58fc | t
- \x3ff3c0ca428c59dd |        1.23456789012345 |        1.23456789012345 | \x3ff3c0ca428c59dd | t
- \x3ff3c0ca428c59f8 |       1.234567890123456 |       1.234567890123456 | \x3ff3c0ca428c59f8 | t
- \x3ff3c0ca428c59fb |      1.2345678901234567 |      1.2345678901234567 | \x3ff3c0ca428c59fb | t
- \x40112e0be8047a7d |             4.294967294 |             4.294967294 | \x40112e0be8047a7d | t
- \x40112e0be815a889 |             4.294967295 |             4.294967295 | \x40112e0be815a889 | t
- \x40112e0be826d695 |             4.294967296 |             4.294967296 | \x40112e0be826d695 | t
- \x40112e0be83804a1 |             4.294967297 |             4.294967297 | \x40112e0be83804a1 | t
- \x40112e0be84932ad |             4.294967298 |             4.294967298 | \x40112e0be84932ad | t
- \x0040000000000000 | 1.7800590868057611e-307 | 1.7800590868057611e-307 | \x0040000000000000 | t
- \x007fffffffffffff | 2.8480945388892175e-306 | 2.8480945388892175e-306 | \x007fffffffffffff | t
- \x0290000000000000 |  2.446494580089078e-296 |  2.446494580089078e-296 | \x0290000000000000 | t
- \x029fffffffffffff | 4.8929891601781557e-296 | 4.8929891601781557e-296 | \x029fffffffffffff | t
- \x4350000000000000 |  1.8014398509481984e+16 |  1.8014398509481984e+16 | \x4350000000000000 | t
- \x435fffffffffffff |  3.6028797018963964e+16 |  3.6028797018963964e+16 | \x435fffffffffffff | t
- \x1330000000000000 |  2.900835519859558e-216 |  2.900835519859558e-216 | \x1330000000000000 | t
- \x133fffffffffffff |  5.801671039719115e-216 |  5.801671039719115e-216 | \x133fffffffffffff | t
- \x3a6fa7161a4d6e0c |   3.196104012172126e-27 |   3.196104012172126e-27 | \x3a6fa7161a4d6e0c | t
-(209 rows)
-
+ERROR:  clapdb doesn't support CTE currently
 -- clean up, lest opr_sanity complain
 drop type xfloat8 cascade;
-NOTICE:  drop cascades to 6 other objects
-DETAIL:  drop cascades to function xfloat8in(cstring)
-drop cascades to function xfloat8out(xfloat8)
-drop cascades to cast from xfloat8 to double precision
-drop cascades to cast from double precision to xfloat8
-drop cascades to cast from xfloat8 to bigint
-drop cascades to cast from bigint to xfloat8
+ERROR:  only support select and create table statement
diff -U3 /home/longqimin/pg_regress_input/expected/date.out /home/longqimin/pg_regress_input/results/date.out
--- /home/longqimin/pg_regress_input/expected/date.out	2024-03-25 09:21:23.437606375 +0800
+++ /home/longqimin/pg_regress_input/results/date.out	2024-03-26 10:07:03.270866518 +0800
@@ -10,7 +10,7 @@
 INSERT INTO DATE_TBL VALUES ('1996-03-02');
 INSERT INTO DATE_TBL VALUES ('1997-02-28');
 INSERT INTO DATE_TBL VALUES ('1997-02-29');
-ERROR:  date/time field value out of range: "1997-02-29"
+ERROR:  invalid input syntax for type date: "1997-02-29"
 INSERT INTO DATE_TBL VALUES ('1997-03-01');
 INSERT INTO DATE_TBL VALUES ('1997-03-02');
 INSERT INTO DATE_TBL VALUES ('2000-04-01');
@@ -21,6 +21,7 @@
 INSERT INTO DATE_TBL VALUES ('2040-04-10');
 INSERT INTO DATE_TBL VALUES ('2040-04-10 BC');
 SET datestyle TO iso;  -- display results in ISO
+ERROR:  only support select and create table statement
 SELECT f1 FROM DATE_TBL order by 1;
       f1       
 ---------------
@@ -70,93 +71,73 @@
 -- Check all the documented input formats
 --
 SET datestyle TO iso;  -- display results in ISO
+ERROR:  only support select and create table statement
 SET datestyle TO ymd;
+ERROR:  only support select and create table statement
 SELECT date 'January 8, 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "January 8, 1999"
 SELECT date '1999-01-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '1999-01-18';
-    date    
+  ?column?  
 ------------
  1999-01-18
 (1 row)
 
 SELECT date '1/8/1999';
-ERROR:  date/time field value out of range: "1/8/1999"
-HINT:  Perhaps you need a different "datestyle" setting.
-SELECT date '1/18/1999';
-ERROR:  date/time field value out of range: "1/18/1999"
-HINT:  Perhaps you need a different "datestyle" setting.
-SELECT date '18/1/1999';
-ERROR:  date/time field value out of range: "18/1/1999"
-HINT:  Perhaps you need a different "datestyle" setting.
-SELECT date '01/02/03';
-    date    
-------------
- 2001-02-03
-(1 row)
-
-SELECT date '19990108';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
-SELECT date '990108';
-    date    
+SELECT date '1/18/1999';
+  ?column?  
 ------------
- 1999-01-08
+ 1999-01-18
 (1 row)
 
-SELECT date '1999.008';
-    date    
+SELECT date '18/1/1999';
+  ?column?  
 ------------
- 1999-01-08
+ 1999-01-18
 (1 row)
 
+SELECT date '01/02/03';
+ERROR:  invalid input syntax for type date: "01/02/03"
+SELECT date '19990108';
+ERROR:  invalid input syntax for type date: "19990108"
+SELECT date '990108';
+ERROR:  invalid input syntax for type date: "990108"
+SELECT date '1999.008';
+ERROR:  invalid input syntax for type date: "1999.008"
 SELECT date 'J2451187';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "J2451187"
 SELECT date 'January 8, 99 BC';
-ERROR:  date/time field value out of range: "January 8, 99 BC"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "January 8, 99 BC"
 SELECT date '99-Jan-08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "99-Jan-08"
 SELECT date '1999-Jan-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '08-Jan-99';
-ERROR:  date/time field value out of range: "08-Jan-99"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "08-Jan-99"
 SELECT date '08-Jan-1999';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date 'Jan-08-99';
-ERROR:  date/time field value out of range: "Jan-08-99"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "Jan-08-99"
 SELECT date 'Jan-08-1999';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
@@ -166,218 +147,135 @@
 SELECT date '1999-08-Jan';
 ERROR:  invalid input syntax for type date: "1999-08-Jan"
 SELECT date '99 Jan 08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "99 Jan 08"
 SELECT date '1999 Jan 08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 Jan 08"
 SELECT date '08 Jan 99';
-ERROR:  date/time field value out of range: "08 Jan 99"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "08 Jan 99"
 SELECT date '08 Jan 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 Jan 1999"
 SELECT date 'Jan 08 99';
-ERROR:  date/time field value out of range: "Jan 08 99"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "Jan 08 99"
 SELECT date 'Jan 08 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "Jan 08 1999"
 SELECT date '99 08 Jan';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "99 08 Jan"
 SELECT date '1999 08 Jan';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 08 Jan"
 SELECT date '99-01-08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "99-01-08"
 SELECT date '1999-01-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '08-01-99';
-ERROR:  date/time field value out of range: "08-01-99"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "08-01-99"
 SELECT date '08-01-1999';
-ERROR:  date/time field value out of range: "08-01-1999"
-HINT:  Perhaps you need a different "datestyle" setting.
+  ?column?  
+------------
+ 1999-08-01
+(1 row)
+
 SELECT date '01-08-99';
-ERROR:  date/time field value out of range: "01-08-99"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "01-08-99"
 SELECT date '01-08-1999';
-ERROR:  date/time field value out of range: "01-08-1999"
-HINT:  Perhaps you need a different "datestyle" setting.
-SELECT date '99-08-01';
-    date    
+  ?column?  
 ------------
- 1999-08-01
+ 1999-01-08
 (1 row)
 
+SELECT date '99-08-01';
+ERROR:  invalid input syntax for type date: "99-08-01"
 SELECT date '1999-08-01';
-    date    
+  ?column?  
 ------------
  1999-08-01
 (1 row)
 
 SELECT date '99 01 08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "99 01 08"
 SELECT date '1999 01 08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 01 08"
 SELECT date '08 01 99';
-ERROR:  date/time field value out of range: "08 01 99"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "08 01 99"
 SELECT date '08 01 1999';
-ERROR:  date/time field value out of range: "08 01 1999"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "08 01 1999"
 SELECT date '01 08 99';
-ERROR:  date/time field value out of range: "01 08 99"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "01 08 99"
 SELECT date '01 08 1999';
-ERROR:  date/time field value out of range: "01 08 1999"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "01 08 1999"
 SELECT date '99 08 01';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "99 08 01"
 SELECT date '1999 08 01';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 08 01"
 SET datestyle TO dmy;
+ERROR:  only support select and create table statement
 SELECT date 'January 8, 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "January 8, 1999"
 SELECT date '1999-01-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '1999-01-18';
-    date    
+  ?column?  
 ------------
  1999-01-18
 (1 row)
 
 SELECT date '1/8/1999';
-    date    
+  ?column?  
 ------------
- 1999-08-01
+ 1999-01-08
 (1 row)
 
 SELECT date '1/18/1999';
-ERROR:  date/time field value out of range: "1/18/1999"
-HINT:  Perhaps you need a different "datestyle" setting.
-SELECT date '18/1/1999';
-    date    
+  ?column?  
 ------------
  1999-01-18
 (1 row)
 
-SELECT date '01/02/03';
-    date    
+SELECT date '18/1/1999';
+  ?column?  
 ------------
- 2003-02-01
+ 1999-01-18
 (1 row)
 
+SELECT date '01/02/03';
+ERROR:  invalid input syntax for type date: "01/02/03"
 SELECT date '19990108';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "19990108"
 SELECT date '990108';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "990108"
 SELECT date '1999.008';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999.008"
 SELECT date 'J2451187';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "J2451187"
 SELECT date 'January 8, 99 BC';
-     date      
----------------
- 0099-01-08 BC
-(1 row)
-
+ERROR:  invalid input syntax for type date: "January 8, 99 BC"
 SELECT date '99-Jan-08';
-ERROR:  date/time field value out of range: "99-Jan-08"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99-Jan-08"
 SELECT date '1999-Jan-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '08-Jan-99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08-Jan-99"
 SELECT date '08-Jan-1999';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date 'Jan-08-99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "Jan-08-99"
 SELECT date 'Jan-08-1999';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
@@ -387,229 +285,135 @@
 SELECT date '1999-08-Jan';
 ERROR:  invalid input syntax for type date: "1999-08-Jan"
 SELECT date '99 Jan 08';
-ERROR:  date/time field value out of range: "99 Jan 08"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99 Jan 08"
 SELECT date '1999 Jan 08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 Jan 08"
 SELECT date '08 Jan 99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 Jan 99"
 SELECT date '08 Jan 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 Jan 1999"
 SELECT date 'Jan 08 99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "Jan 08 99"
 SELECT date 'Jan 08 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "Jan 08 1999"
 SELECT date '99 08 Jan';
 ERROR:  invalid input syntax for type date: "99 08 Jan"
 SELECT date '1999 08 Jan';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 08 Jan"
 SELECT date '99-01-08';
-ERROR:  date/time field value out of range: "99-01-08"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99-01-08"
 SELECT date '1999-01-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '08-01-99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08-01-99"
 SELECT date '08-01-1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
-SELECT date '01-08-99';
-    date    
+  ?column?  
 ------------
  1999-08-01
 (1 row)
 
+SELECT date '01-08-99';
+ERROR:  invalid input syntax for type date: "01-08-99"
 SELECT date '01-08-1999';
-    date    
+  ?column?  
 ------------
- 1999-08-01
+ 1999-01-08
 (1 row)
 
 SELECT date '99-08-01';
-ERROR:  date/time field value out of range: "99-08-01"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99-08-01"
 SELECT date '1999-08-01';
-    date    
+  ?column?  
 ------------
  1999-08-01
 (1 row)
 
 SELECT date '99 01 08';
-ERROR:  date/time field value out of range: "99 01 08"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99 01 08"
 SELECT date '1999 01 08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 01 08"
 SELECT date '08 01 99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 01 99"
 SELECT date '08 01 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 01 1999"
 SELECT date '01 08 99';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "01 08 99"
 SELECT date '01 08 1999';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "01 08 1999"
 SELECT date '99 08 01';
-ERROR:  date/time field value out of range: "99 08 01"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99 08 01"
 SELECT date '1999 08 01';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 08 01"
 SET datestyle TO mdy;
+ERROR:  only support select and create table statement
 SELECT date 'January 8, 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "January 8, 1999"
 SELECT date '1999-01-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '1999-01-18';
-    date    
+  ?column?  
 ------------
  1999-01-18
 (1 row)
 
 SELECT date '1/8/1999';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '1/18/1999';
-    date    
+  ?column?  
 ------------
  1999-01-18
 (1 row)
 
 SELECT date '18/1/1999';
-ERROR:  date/time field value out of range: "18/1/1999"
-HINT:  Perhaps you need a different "datestyle" setting.
-SELECT date '01/02/03';
-    date    
+  ?column?  
 ------------
- 2003-01-02
+ 1999-01-18
 (1 row)
 
+SELECT date '01/02/03';
+ERROR:  invalid input syntax for type date: "01/02/03"
 SELECT date '19990108';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "19990108"
 SELECT date '990108';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "990108"
 SELECT date '1999.008';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999.008"
 SELECT date 'J2451187';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "J2451187"
 SELECT date 'January 8, 99 BC';
-     date      
----------------
- 0099-01-08 BC
-(1 row)
-
+ERROR:  invalid input syntax for type date: "January 8, 99 BC"
 SELECT date '99-Jan-08';
-ERROR:  date/time field value out of range: "99-Jan-08"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99-Jan-08"
 SELECT date '1999-Jan-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '08-Jan-99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08-Jan-99"
 SELECT date '08-Jan-1999';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date 'Jan-08-99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "Jan-08-99"
 SELECT date 'Jan-08-1999';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
@@ -621,149 +425,89 @@
 SELECT date '99 Jan 08';
 ERROR:  invalid input syntax for type date: "99 Jan 08"
 SELECT date '1999 Jan 08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 Jan 08"
 SELECT date '08 Jan 99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 Jan 99"
 SELECT date '08 Jan 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 Jan 1999"
 SELECT date 'Jan 08 99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "Jan 08 99"
 SELECT date 'Jan 08 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "Jan 08 1999"
 SELECT date '99 08 Jan';
 ERROR:  invalid input syntax for type date: "99 08 Jan"
 SELECT date '1999 08 Jan';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 08 Jan"
 SELECT date '99-01-08';
-ERROR:  date/time field value out of range: "99-01-08"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99-01-08"
 SELECT date '1999-01-08';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '08-01-99';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08-01-99"
 SELECT date '08-01-1999';
-    date    
+  ?column?  
 ------------
  1999-08-01
 (1 row)
 
 SELECT date '01-08-99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "01-08-99"
 SELECT date '01-08-1999';
-    date    
+  ?column?  
 ------------
  1999-01-08
 (1 row)
 
 SELECT date '99-08-01';
-ERROR:  date/time field value out of range: "99-08-01"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99-08-01"
 SELECT date '1999-08-01';
-    date    
+  ?column?  
 ------------
  1999-08-01
 (1 row)
 
 SELECT date '99 01 08';
-ERROR:  date/time field value out of range: "99 01 08"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99 01 08"
 SELECT date '1999 01 08';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 01 08"
 SELECT date '08 01 99';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 01 99"
 SELECT date '08 01 1999';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "08 01 1999"
 SELECT date '01 08 99';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "01 08 99"
 SELECT date '01 08 1999';
-    date    
-------------
- 1999-01-08
-(1 row)
-
+ERROR:  invalid input syntax for type date: "01 08 1999"
 SELECT date '99 08 01';
-ERROR:  date/time field value out of range: "99 08 01"
-HINT:  Perhaps you need a different "datestyle" setting.
+ERROR:  invalid input syntax for type date: "99 08 01"
 SELECT date '1999 08 01';
-    date    
-------------
- 1999-08-01
-(1 row)
-
+ERROR:  invalid input syntax for type date: "1999 08 01"
 -- Check upper and lower limits of date range
 SELECT date '4714-11-24 BC';
-     date      
+   ?column?    
 ---------------
  4714-11-24 BC
 (1 row)
 
 SELECT date '4714-11-23 BC';  -- out of range
-ERROR:  date out of range: "4714-11-23 BC"
-SELECT date '5874897-12-31';
-     date      
+   ?column?    
 ---------------
- 5874897-12-31
+ 4714-11-23 BC
 (1 row)
 
+SELECT date '5874897-12-31';
+ERROR:  invalid input syntax for type date: "5874897-12-31"
 SELECT date '5874898-01-01';  -- out of range
-ERROR:  date out of range: "5874898-01-01"
+ERROR:  invalid input syntax for type date: "5874898-01-01"
 -- Test non-error-throwing API
 SELECT pg_input_is_valid('now', 'date');
  pg_input_is_valid 
 -------------------
- t
+ f
 (1 row)
 
 SELECT pg_input_is_valid('garbage', 'date');
@@ -779,18 +523,11 @@
 (1 row)
 
 SELECT * FROM pg_input_error_info('garbage', 'date');
-                    message                    | detail | hint | sql_error_code 
------------------------------------------------+--------+------+----------------
- invalid input syntax for type date: "garbage" |        |      | 22007
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 SELECT * FROM pg_input_error_info('6874898-01-01', 'date');
-              message               | detail | hint | sql_error_code 
-------------------------------------+--------+------+----------------
- date out of range: "6874898-01-01" |        |      | 22008
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 SET datestyle TO iso;  -- display results in ISO
+ERROR:  only support select and create table statement
 --
 -- Simple math
 -- Leave most of it for the horology tests
@@ -798,81 +535,38 @@
 SELECT f1 - date '2000-01-01' AS "Days From 2K" FROM DATE_TBL order by 1;
  Days From 2K 
 --------------
-     -1475115
-       -15607
-       -15542
-        -1403
-        -1402
-        -1401
-        -1400
-        -1037
-        -1036
-        -1035
-           91
-           92
-           93
-        13977
-        14343
-        14710
+ -1475115 day
+ -15607 day
+ -15542 day
+ -1403 day
+ -1402 day
+ -1401 day
+ -1400 day
+ -1037 day
+ -1036 day
+ -1035 day
+ 91 day
+ 92 day
+ 93 day
+ 13977 day
+ 14343 day
+ 14710 day
 (16 rows)
 
 SELECT f1 - date 'epoch' AS "Days From Epoch" FROM DATE_TBL order by 1;
- Days From Epoch 
------------------
-        -1464158
-           -4650
-           -4585
-            9554
-            9555
-            9556
-            9557
-            9920
-            9921
-            9922
-           11048
-           11049
-           11050
-           24934
-           25300
-           25667
-(16 rows)
-
+ERROR:  invalid input syntax for type date: "epoch"
 SELECT date 'yesterday' - date 'today' AS "One day";
- One day 
----------
-      -1
-(1 row)
-
+ERROR:  invalid input syntax for type date: "yesterday"
 SELECT date 'today' - date 'tomorrow' AS "One day";
- One day 
----------
-      -1
-(1 row)
-
+ERROR:  invalid input syntax for type date: "today"
 SELECT date 'yesterday' - date 'tomorrow' AS "Two days";
- Two days 
-----------
-       -2
-(1 row)
-
+ERROR:  invalid input syntax for type date: "yesterday"
 SELECT date 'tomorrow' - date 'today' AS "One day";
- One day 
----------
-       1
-(1 row)
-
+ERROR:  invalid input syntax for type date: "tomorrow"
 SELECT date 'today' - date 'yesterday' AS "One day";
- One day 
----------
-       1
-(1 row)
-
+ERROR:  invalid input syntax for type date: "today"
 SELECT date 'tomorrow' - date 'yesterday' AS "Two days";
- Two days 
-----------
-        2
-(1 row)
-
+ERROR:  invalid input syntax for type date: "tomorrow"
 --
 -- test extract!
 --
@@ -892,90 +586,67 @@
     date_part('julian', f1) AS julian,
     date_part('epoch', f1) AS epoch
     FROM date_tbl order by 1;
-     date      | year  | month | day | quarter | decade | century | millennium | isoyear | week | dow | isodow | doy | julian  |     epoch     
----------------+-------+-------+-----+---------+--------+---------+------------+---------+------+-----+--------+-----+---------+---------------
- 2040-04-10 BC | -2040 |     4 |  10 |       2 |   -204 |     -21 |         -3 |   -2040 |   15 |   1 |      1 | 100 |  976430 | -126503251200
- 1957-04-09    |  1957 |     4 |   9 |       2 |    195 |      20 |          2 |    1957 |   15 |   2 |      2 |  99 | 2435938 |    -401760000
- 1957-06-13    |  1957 |     6 |  13 |       2 |    195 |      20 |          2 |    1957 |   24 |   4 |      4 | 164 | 2436003 |    -396144000
- 1996-02-28    |  1996 |     2 |  28 |       1 |    199 |      20 |          2 |    1996 |    9 |   3 |      3 |  59 | 2450142 |     825465600
- 1996-02-29    |  1996 |     2 |  29 |       1 |    199 |      20 |          2 |    1996 |    9 |   4 |      4 |  60 | 2450143 |     825552000
- 1996-03-01    |  1996 |     3 |   1 |       1 |    199 |      20 |          2 |    1996 |    9 |   5 |      5 |  61 | 2450144 |     825638400
- 1996-03-02    |  1996 |     3 |   2 |       1 |    199 |      20 |          2 |    1996 |    9 |   6 |      6 |  62 | 2450145 |     825724800
- 1997-02-28    |  1997 |     2 |  28 |       1 |    199 |      20 |          2 |    1997 |    9 |   5 |      5 |  59 | 2450508 |     857088000
- 1997-03-01    |  1997 |     3 |   1 |       1 |    199 |      20 |          2 |    1997 |    9 |   6 |      6 |  60 | 2450509 |     857174400
- 1997-03-02    |  1997 |     3 |   2 |       1 |    199 |      20 |          2 |    1997 |    9 |   0 |      7 |  61 | 2450510 |     857260800
- 2000-04-01    |  2000 |     4 |   1 |       2 |    200 |      20 |          2 |    2000 |   13 |   6 |      6 |  92 | 2451636 |     954547200
- 2000-04-02    |  2000 |     4 |   2 |       2 |    200 |      20 |          2 |    2000 |   13 |   0 |      7 |  93 | 2451637 |     954633600
- 2000-04-03    |  2000 |     4 |   3 |       2 |    200 |      20 |          2 |    2000 |   14 |   1 |      1 |  94 | 2451638 |     954720000
- 2038-04-08    |  2038 |     4 |   8 |       2 |    203 |      21 |          3 |    2038 |   14 |   4 |      4 |  98 | 2465522 |    2154297600
- 2039-04-09    |  2039 |     4 |   9 |       2 |    203 |      21 |          3 |    2039 |   14 |   6 |      6 |  99 | 2465888 |    2185920000
- 2040-04-10    |  2040 |     4 |  10 |       2 |    204 |      21 |          3 |    2040 |   15 |   2 |      2 | 101 | 2466255 |    2217628800
-(16 rows)
-
+ERROR:  timestamp units "quarter" not recognized
 --
 -- epoch
 --
 SELECT EXTRACT(EPOCH FROM DATE        '1970-01-01');     --  0
- extract 
----------
-       0
-(1 row)
-
+ERROR:  timestamp units "epoch" not recognized
 --
 -- century
 --
 SELECT EXTRACT(CENTURY FROM DATE '0101-12-31 BC'); -- -2
- extract 
----------
-      -2
+ date_part 
+-----------
+        -2
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM DATE '0100-12-31 BC'); -- -1
- extract 
----------
-      -1
+ date_part 
+-----------
+        -1
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM DATE '0001-12-31 BC'); -- -1
- extract 
----------
-      -1
+ date_part 
+-----------
+        -1
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM DATE '0001-01-01');    --  1
- extract 
----------
-       1
+ date_part 
+-----------
+         1
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM DATE '0001-01-01 AD'); --  1
- extract 
----------
-       1
+ date_part 
+-----------
+         1
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM DATE '1900-12-31');    -- 19
- extract 
----------
-      19
+ date_part 
+-----------
+        19
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM DATE '1901-01-01');    -- 20
- extract 
----------
-      20
+ date_part 
+-----------
+        20
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM DATE '2000-12-31');    -- 20
- extract 
----------
-      20
+ date_part 
+-----------
+        20
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM DATE '2001-01-01');    -- 21
- extract 
----------
-      21
+ date_part 
+-----------
+        21
 (1 row)
 
 SELECT EXTRACT(CENTURY FROM CURRENT_DATE)>=21 AS True;     -- true
@@ -988,220 +659,196 @@
 -- millennium
 --
 SELECT EXTRACT(MILLENNIUM FROM DATE '0001-12-31 BC'); -- -1
- extract 
----------
-      -1
+ date_part 
+-----------
+        -1
 (1 row)
 
 SELECT EXTRACT(MILLENNIUM FROM DATE '0001-01-01 AD'); --  1
- extract 
----------
-       1
+ date_part 
+-----------
+         1
 (1 row)
 
 SELECT EXTRACT(MILLENNIUM FROM DATE '1000-12-31');    --  1
- extract 
----------
-       1
+ date_part 
+-----------
+         1
 (1 row)
 
 SELECT EXTRACT(MILLENNIUM FROM DATE '1001-01-01');    --  2
- extract 
----------
-       2
+ date_part 
+-----------
+         2
 (1 row)
 
 SELECT EXTRACT(MILLENNIUM FROM DATE '2000-12-31');    --  2
- extract 
----------
-       2
+ date_part 
+-----------
+         2
 (1 row)
 
 SELECT EXTRACT(MILLENNIUM FROM DATE '2001-01-01');    --  3
- extract 
----------
-       3
+ date_part 
+-----------
+         3
 (1 row)
 
 -- next test to be fixed on the turn of the next millennium;-)
 SELECT EXTRACT(MILLENNIUM FROM CURRENT_DATE);         --  3
- extract 
----------
-       3
+ date_part 
+-----------
+         3
 (1 row)
 
 --
 -- decade
 --
 SELECT EXTRACT(DECADE FROM DATE '1994-12-25');    -- 199
- extract 
----------
-     199
+ date_part 
+-----------
+       199
 (1 row)
 
 SELECT EXTRACT(DECADE FROM DATE '0010-01-01');    --   1
- extract 
----------
-       1
+ date_part 
+-----------
+         1
 (1 row)
 
 SELECT EXTRACT(DECADE FROM DATE '0009-12-31');    --   0
- extract 
----------
-       0
+ date_part 
+-----------
+         0
 (1 row)
 
 SELECT EXTRACT(DECADE FROM DATE '0001-01-01 BC'); --   0
- extract 
----------
-       0
+ date_part 
+-----------
+         0
 (1 row)
 
 SELECT EXTRACT(DECADE FROM DATE '0002-12-31 BC'); --  -1
- extract 
----------
-      -1
+ date_part 
+-----------
+        -1
 (1 row)
 
 SELECT EXTRACT(DECADE FROM DATE '0011-01-01 BC'); --  -1
- extract 
----------
-      -1
+ date_part 
+-----------
+        -1
 (1 row)
 
 SELECT EXTRACT(DECADE FROM DATE '0012-12-31 BC'); --  -2
- extract 
----------
-      -2
+ date_part 
+-----------
+        -2
 (1 row)
 
 --
 -- all possible fields
 --
 SELECT EXTRACT(MICROSECONDS  FROM DATE '2020-08-11');
-ERROR:  unit "microseconds" not supported for type date
+ date_part 
+-----------
+         0
+(1 row)
+
 SELECT EXTRACT(MILLISECONDS  FROM DATE '2020-08-11');
-ERROR:  unit "milliseconds" not supported for type date
+ date_part 
+-----------
+         0
+(1 row)
+
 SELECT EXTRACT(SECOND        FROM DATE '2020-08-11');
-ERROR:  unit "second" not supported for type date
+ date_part 
+-----------
+         0
+(1 row)
+
 SELECT EXTRACT(MINUTE        FROM DATE '2020-08-11');
-ERROR:  unit "minute" not supported for type date
+ date_part 
+-----------
+         0
+(1 row)
+
 SELECT EXTRACT(HOUR          FROM DATE '2020-08-11');
-ERROR:  unit "hour" not supported for type date
+ date_part 
+-----------
+         0
+(1 row)
+
 SELECT EXTRACT(DAY           FROM DATE '2020-08-11');
- extract 
----------
-      11
+ date_part 
+-----------
+        11
 (1 row)
 
 SELECT EXTRACT(MONTH         FROM DATE '2020-08-11');
- extract 
----------
-       8
+ date_part 
+-----------
+         8
 (1 row)
 
 SELECT EXTRACT(YEAR          FROM DATE '2020-08-11');
- extract 
----------
-    2020
+ date_part 
+-----------
+      2020
 (1 row)
 
 SELECT EXTRACT(YEAR          FROM DATE '2020-08-11 BC');
- extract 
----------
-   -2020
+ date_part 
+-----------
+     -2020
 (1 row)
 
 SELECT EXTRACT(DECADE        FROM DATE '2020-08-11');
- extract 
----------
-     202
+ date_part 
+-----------
+       202
 (1 row)
 
 SELECT EXTRACT(CENTURY       FROM DATE '2020-08-11');
- extract 
----------
-      21
+ date_part 
+-----------
+        21
 (1 row)
 
 SELECT EXTRACT(MILLENNIUM    FROM DATE '2020-08-11');
- extract 
----------
-       3
+ date_part 
+-----------
+         3
 (1 row)
 
 SELECT EXTRACT(ISOYEAR       FROM DATE '2020-08-11');
- extract 
----------
-    2020
-(1 row)
-
+ERROR:  timestamp units "isoyear" not recognized
 SELECT EXTRACT(ISOYEAR       FROM DATE '2020-08-11 BC');
- extract 
----------
-   -2020
-(1 row)
-
+ERROR:  timestamp units "isoyear" not recognized
 SELECT EXTRACT(QUARTER       FROM DATE '2020-08-11');
- extract 
----------
-       3
-(1 row)
-
+ERROR:  timestamp units "quarter" not recognized
 SELECT EXTRACT(WEEK          FROM DATE '2020-08-11');
- extract 
----------
-      33
-(1 row)
-
+ERROR:  timestamp units "week" not recognized
 SELECT EXTRACT(DOW           FROM DATE '2020-08-11');
- extract 
----------
-       2
-(1 row)
-
+ERROR:  timestamp units "dow" not recognized
 SELECT EXTRACT(DOW           FROM DATE '2020-08-16');
- extract 
----------
-       0
-(1 row)
-
+ERROR:  timestamp units "dow" not recognized
 SELECT EXTRACT(ISODOW        FROM DATE '2020-08-11');
- extract 
----------
-       2
-(1 row)
-
+ERROR:  timestamp units "isodow" not recognized
 SELECT EXTRACT(ISODOW        FROM DATE '2020-08-16');
- extract 
----------
-       7
-(1 row)
-
+ERROR:  timestamp units "isodow" not recognized
 SELECT EXTRACT(DOY           FROM DATE '2020-08-11');
- extract 
----------
-     224
-(1 row)
-
+ERROR:  timestamp units "doy" not recognized
 SELECT EXTRACT(TIMEZONE      FROM DATE '2020-08-11');
-ERROR:  unit "timezone" not supported for type date
+ERROR:  timestamp units "timezone" not recognized
 SELECT EXTRACT(TIMEZONE_M    FROM DATE '2020-08-11');
-ERROR:  unit "timezone_m" not supported for type date
+ERROR:  timestamp units "timezone_m" not recognized
 SELECT EXTRACT(TIMEZONE_H    FROM DATE '2020-08-11');
-ERROR:  unit "timezone_h" not supported for type date
+ERROR:  timestamp units "timezone_h" not recognized
 SELECT EXTRACT(EPOCH         FROM DATE '2020-08-11');
-  extract   
-------------
- 1597104000
-(1 row)
-
+ERROR:  timestamp units "epoch" not recognized
 SELECT EXTRACT(JULIAN        FROM DATE '2020-08-11');
- extract 
----------
- 2459073
-(1 row)
-
+ERROR:  timestamp units "julian" not recognized
 --
 -- test trunc function!
 --
@@ -1212,9 +859,9 @@
 (1 row)
 
 SELECT DATE_TRUNC('MILLENNIUM', DATE '1970-03-20'); -- 1001-01-01
-       date_trunc       
-------------------------
- 1001-01-01 00:00:00-08
+     date_trunc      
+---------------------
+ 1001-01-01 00:00:00
 (1 row)
 
 SELECT DATE_TRUNC('CENTURY', TIMESTAMP '1970-03-20 04:30:00.00000'); -- 1901
@@ -1224,201 +871,109 @@
 (1 row)
 
 SELECT DATE_TRUNC('CENTURY', DATE '1970-03-20'); -- 1901
-       date_trunc       
-------------------------
- 1901-01-01 00:00:00-08
+     date_trunc      
+---------------------
+ 1901-01-01 00:00:00
 (1 row)
 
 SELECT DATE_TRUNC('CENTURY', DATE '2004-08-10'); -- 2001-01-01
-       date_trunc       
-------------------------
- 2001-01-01 00:00:00-08
+     date_trunc      
+---------------------
+ 2001-01-01 00:00:00
 (1 row)
 
 SELECT DATE_TRUNC('CENTURY', DATE '0002-02-04'); -- 0001-01-01
-       date_trunc       
-------------------------
- 0001-01-01 00:00:00-08
+     date_trunc      
+---------------------
+ 0001-01-01 00:00:00
 (1 row)
 
 SELECT DATE_TRUNC('CENTURY', DATE '0055-08-10 BC'); -- 0100-01-01 BC
-        date_trunc         
----------------------------
- 0100-01-01 00:00:00-08 BC
+       date_trunc       
+------------------------
+ 0100-01-01 00:00:00 BC
 (1 row)
 
 SELECT DATE_TRUNC('DECADE', DATE '1993-12-25'); -- 1990-01-01
-       date_trunc       
-------------------------
- 1990-01-01 00:00:00-08
+     date_trunc      
+---------------------
+ 1990-01-01 00:00:00
 (1 row)
 
 SELECT DATE_TRUNC('DECADE', DATE '0004-12-25'); -- 0001-01-01 BC
-        date_trunc         
----------------------------
- 0001-01-01 00:00:00-08 BC
+       date_trunc       
+------------------------
+ 0001-01-01 00:00:00 BC
 (1 row)
 
 SELECT DATE_TRUNC('DECADE', DATE '0002-12-31 BC'); -- 0011-01-01 BC
-        date_trunc         
----------------------------
- 0011-01-01 00:00:00-08 BC
+       date_trunc       
+------------------------
+ 0011-01-01 00:00:00 BC
 (1 row)
 
 --
 -- test infinity
 --
 select 'infinity'::date, '-infinity'::date;
-   date   |   date    
-----------+-----------
- infinity | -infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 select 'infinity'::date > 'today'::date as t;
- t 
----
- t
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 select '-infinity'::date < 'today'::date as t;
- t 
----
- t
-(1 row)
-
+ERROR:  invalid input syntax for type date: "-infinity"
 select isfinite('infinity'::date), isfinite('-infinity'::date), isfinite('today'::date);
- isfinite | isfinite | isfinite 
-----------+----------+----------
- f        | f        | t
-(1 row)
-
+ERROR:  function isfinite does not exist
 select 'infinity'::date = '+infinity'::date as t;
- t 
----
- t
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 --
 -- oscillating fields from non-finite date:
 --
 SELECT EXTRACT(DAY FROM DATE 'infinity');      -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(DAY FROM DATE '-infinity');     -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "-infinity"
 -- all supported fields
 SELECT EXTRACT(DAY           FROM DATE 'infinity');    -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(MONTH         FROM DATE 'infinity');    -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(QUARTER       FROM DATE 'infinity');    -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(WEEK          FROM DATE 'infinity');    -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(DOW           FROM DATE 'infinity');    -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(ISODOW        FROM DATE 'infinity');    -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(DOY           FROM DATE 'infinity');    -- NULL
- extract 
----------
-        
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 --
 -- monotonic fields from non-finite date:
 --
 SELECT EXTRACT(EPOCH FROM DATE 'infinity');         --  Infinity
- extract  
-----------
- Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(EPOCH FROM DATE '-infinity');        -- -Infinity
-  extract  
------------
- -Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "-infinity"
 -- all supported fields
 SELECT EXTRACT(YEAR       FROM DATE 'infinity');    --  Infinity
- extract  
-----------
- Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(DECADE     FROM DATE 'infinity');    --  Infinity
- extract  
-----------
- Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(CENTURY    FROM DATE 'infinity');    --  Infinity
- extract  
-----------
- Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(MILLENNIUM FROM DATE 'infinity');    --  Infinity
- extract  
-----------
- Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(JULIAN     FROM DATE 'infinity');    --  Infinity
- extract  
-----------
- Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(ISOYEAR    FROM DATE 'infinity');    --  Infinity
- extract  
-----------
- Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 SELECT EXTRACT(EPOCH      FROM DATE 'infinity');    --  Infinity
- extract  
-----------
- Infinity
-(1 row)
-
+ERROR:  invalid input syntax for type date: "infinity"
 --
 -- wrong fields from non-finite date:
 --
 SELECT EXTRACT(MICROSEC  FROM DATE 'infinity');     -- error
-ERROR:  unit "microsec" not recognized for type date
+ERROR:  invalid input syntax for type date: "infinity"
 -- test constructors
 select make_date(2013, 7, 15);
  make_date  
@@ -1440,14 +995,18 @@
 
 -- should fail
 select make_date(0, 7, 15);
-ERROR:  date field value out of range: 0-07-15
+ERROR:  out of range
 select make_date(2013, 2, 30);
-ERROR:  date field value out of range: 2013-02-30
+ERROR:  out of range
 select make_date(2013, 13, 1);
-ERROR:  date field value out of range: 2013-13-01
+ERROR:  out of range
 select make_date(2013, 11, -1);
-ERROR:  date field value out of range: 2013-11--1
+ERROR:  out of range
 select make_time(10, 55, 100.1);
-ERROR:  time field value out of range: 10:55:100.1
+ make_time  
+------------
+ 10:56:40.1
+(1 row)
+
 select make_time(24, 0, 2.1);
-ERROR:  time field value out of range: 24:00:2.1
+ERROR:  out of range
diff -U3 /home/longqimin/pg_regress_input/expected/time.out /home/longqimin/pg_regress_input/results/time.out
--- /home/longqimin/pg_regress_input/expected/time.out	2024-03-25 09:21:23.437606375 +0800
+++ /home/longqimin/pg_regress_input/results/time.out	2024-03-26 10:07:46.658984414 +0800
@@ -73,37 +73,29 @@
 
 -- Check edge cases
 SELECT '23:59:59.999999'::time;
-      time       
+    ?column?     
 -----------------
  23:59:59.999999
 (1 row)
 
 SELECT '23:59:59.9999999'::time;  -- rounds up
-   time   
-----------
- 24:00:00
+    ?column?     
+-----------------
+ 23:59:59.999999
 (1 row)
 
 SELECT '23:59:60'::time;  -- rounds up
-   time   
-----------
- 24:00:00
-(1 row)
-
+ERROR:  invalid input syntax for type time: "23:59:60"
 SELECT '24:00:00'::time;  -- allowed
-   time   
-----------
- 24:00:00
-(1 row)
-
+ERROR:  invalid input syntax for type time: "24:00:00"
 SELECT '24:00:00.01'::time;  -- not allowed
-ERROR:  date/time field value out of range: "24:00:00.01"
+ERROR:  invalid input syntax for type time: "24:00:00.01"
 SELECT '23:59:60.01'::time;  -- not allowed
-ERROR:  date/time field value out of range: "23:59:60.01"
+ERROR:  invalid input syntax for type time: "23:59:60.01"
 SELECT '24:01:00'::time;  -- not allowed
-ERROR:  date/time field value out of range: "24:01:00"
+ERROR:  invalid input syntax for type time: "24:01:00"
 SELECT '25:00:00'::time;  -- not allowed
-ERROR:  date/time field value out of range: "25:00:00"
+ERROR:  invalid input syntax for type time: "25:00:00"
 -- Test non-error-throwing API
 SELECT pg_input_is_valid('12:00:00', 'time');
  pg_input_is_valid 
@@ -124,17 +116,9 @@
 (1 row)
 
 SELECT * FROM pg_input_error_info('25:00:00', 'time');
-                    message                     | detail | hint | sql_error_code 
-------------------------------------------------+--------+------+----------------
- date/time field value out of range: "25:00:00" |        |      | 22008
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 SELECT * FROM pg_input_error_info('15:36:39 America/New_York', 'time');
-                             message                             | detail | hint | sql_error_code 
------------------------------------------------------------------+--------+------+----------------
- invalid input syntax for type time: "15:36:39 America/New_York" |        |      | 22007
-(1 row)
-
+ERROR:  function pg_input_error_info does not exist
 --
 -- TIME simple math
 --
@@ -144,53 +128,52 @@
 -- and do the rest of the testing in horology.sql
 -- where we do mixed-type arithmetic. - thomas 2000-12-02
 SELECT f1 + time '00:01' AS "Illegal" FROM TIME_TBL order by 1;
-ERROR:  operator is not unique: time without time zone + time without time zone
-HINT:  Could not choose a best candidate operator. You might need to add explicit type casts.
+ERROR:  IRGenerator:lookup failed, native function not found: [cast_time_datetime]
 --
 -- test EXTRACT
 --
 SELECT EXTRACT(MICROSECOND FROM TIME '2020-05-26 13:30:25.575401');
- extract  
-----------
- 25575401
+ date_part 
+-----------
+  25575401
 (1 row)
 
 SELECT EXTRACT(MILLISECOND FROM TIME '2020-05-26 13:30:25.575401');
-  extract  
+ date_part 
 -----------
  25575.401
 (1 row)
 
 SELECT EXTRACT(SECOND      FROM TIME '2020-05-26 13:30:25.575401');
-  extract  
+ date_part 
 -----------
  25.575401
 (1 row)
 
 SELECT EXTRACT(MINUTE      FROM TIME '2020-05-26 13:30:25.575401');
- extract 
----------
-      30
+ date_part 
+-----------
+        30
 (1 row)
 
 SELECT EXTRACT(HOUR        FROM TIME '2020-05-26 13:30:25.575401');
- extract 
----------
-      13
+ date_part 
+-----------
+        13
 (1 row)
 
 SELECT EXTRACT(DAY         FROM TIME '2020-05-26 13:30:25.575401');  -- error
-ERROR:  unit "day" not supported for type time without time zone
+ date_part 
+-----------
+         0
+(1 row)
+
 SELECT EXTRACT(FORTNIGHT   FROM TIME '2020-05-26 13:30:25.575401');  -- error
-ERROR:  unit "fortnight" not recognized for type time without time zone
+ERROR:  timestamp units "fortnight" not recognized
 SELECT EXTRACT(TIMEZONE    FROM TIME '2020-05-26 13:30:25.575401');  -- error
-ERROR:  unit "timezone" not supported for type time without time zone
+ERROR:  timestamp units "timezone" not recognized
 SELECT EXTRACT(EPOCH       FROM TIME '2020-05-26 13:30:25.575401');
-   extract    
---------------
- 48625.575401
-(1 row)
-
+ERROR:  timestamp units "epoch" not recognized
 -- date_part implementation is mostly the same as extract, so only
 -- test a few cases for additional coverage.
 SELECT date_part('microsecond', TIME '2020-05-26 13:30:25.575401');
@@ -212,8 +195,4 @@
 (1 row)
 
 SELECT date_part('epoch',       TIME '2020-05-26 13:30:25.575401');
-  date_part   
---------------
- 48625.575401
-(1 row)
-
+ERROR:  timestamp units "epoch" not recognized
diff -U3 /home/longqimin/pg_regress_input/expected/select.out /home/longqimin/pg_regress_input/results/select.out
--- /home/longqimin/pg_regress_input/expected/select.out	2024-03-26 10:04:58.592527808 +0800
+++ /home/longqimin/pg_regress_input/results/select.out	2024-03-26 10:07:55.206007632 +0800
@@ -219,16 +219,16 @@
 SELECT onek2.* FROM onek2 WHERE onek2.unique1 < 10;
  unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
 ---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
-       0 |     998 |   0 |    0 |   0 |      0 |       0 |        0 |           0 |         0 |        0 |   0 |    1 | AAAAAA   | KMBAAA   | OOOOxx
+       9 |      49 |   1 |    1 |   9 |      9 |       9 |        9 |           9 |         9 |        9 |  18 |   19 | JAAAAA   | XBAAAA   | HHHHxx
        1 |     214 |   1 |    1 |   1 |      1 |       1 |        1 |           1 |         1 |        1 |   2 |    3 | BAAAAA   | GIAAAA   | OOOOxx
        2 |     326 |   0 |    2 |   2 |      2 |       2 |        2 |           2 |         2 |        2 |   4 |    5 | CAAAAA   | OMAAAA   | OOOOxx
        3 |     431 |   1 |    3 |   3 |      3 |       3 |        3 |           3 |         3 |        3 |   6 |    7 | DAAAAA   | PQAAAA   | VVVVxx
-       4 |     833 |   0 |    0 |   4 |      4 |       4 |        4 |           4 |         4 |        4 |   8 |    9 | EAAAAA   | BGBAAA   | HHHHxx
        5 |     541 |   1 |    1 |   5 |      5 |       5 |        5 |           5 |         5 |        5 |  10 |   11 | FAAAAA   | VUAAAA   | HHHHxx
-       6 |     978 |   0 |    2 |   6 |      6 |       6 |        6 |           6 |         6 |        6 |  12 |   13 | GAAAAA   | QLBAAA   | OOOOxx
        7 |     647 |   1 |    3 |   7 |      7 |       7 |        7 |           7 |         7 |        7 |  14 |   15 | HAAAAA   | XYAAAA   | VVVVxx
        8 |     653 |   0 |    0 |   8 |      8 |       8 |        8 |           8 |         8 |        8 |  16 |   17 | IAAAAA   | DZAAAA   | HHHHxx
-       9 |      49 |   1 |    1 |   9 |      9 |       9 |        9 |           9 |         9 |        9 |  18 |   19 | JAAAAA   | XBAAAA   | HHHHxx
+       4 |     833 |   0 |    0 |   4 |      4 |       4 |        4 |           4 |         4 |        4 |   8 |    9 | EAAAAA   | BGBAAA   | HHHHxx
+       6 |     978 |   0 |    2 |   6 |      6 |       6 |        6 |           6 |         6 |        6 |  12 |   13 | GAAAAA   | QLBAAA   | OOOOxx
+       0 |     998 |   0 |    0 |   0 |      0 |       0 |        0 |           0 |         0 |        0 |   0 |    1 | AAAAAA   | KMBAAA   | OOOOxx
 (10 rows)
 
 --
@@ -268,25 +268,25 @@
    WHERE onek2.unique1 > 980;
  unique1 | stringu1 
 ---------+----------
-     981 | TLAAAA
-     982 | ULAAAA
+     997 | JMAAAA
+     995 | HMAAAA
+     999 | LMAAAA
      983 | VLAAAA
-     984 | WLAAAA
-     985 | XLAAAA
-     986 | YLAAAA
-     987 | ZLAAAA
-     988 | AMAAAA
      989 | BMAAAA
+     986 | YLAAAA
+     996 | IMAAAA
+     982 | ULAAAA
+     992 | EMAAAA
      990 | CMAAAA
      991 | DMAAAA
-     992 | EMAAAA
+     984 | WLAAAA
+     981 | TLAAAA
+     998 | KMAAAA
      993 | FMAAAA
      994 | GMAAAA
-     995 | HMAAAA
-     996 | IMAAAA
-     997 | JMAAAA
-     998 | KMAAAA
-     999 | LMAAAA
+     988 | AMAAAA
+     987 | ZLAAAA
+     985 | XLAAAA
 (19 rows)
 
 --RESET enable_seqscan;
@@ -300,68 +300,7 @@
 --
 -- SELECT name, age FROM person*; ??? check if different
 SELECT p.name, p.age FROM person* p;
-  name   | age 
----------+-----
- mike    |  40
- joe     |  20
- sally   |  34
- sandra  |  19
- alex    |  30
- sue     |  50
- denise  |  24
- sarah   |  88
- teresa  |  38
- nan     |  28
- leah    |  68
- wendy   |  78
- melissa |  28
- joan    |  18
- mary    |   8
- jane    |  58
- liza    |  38
- jean    |  28
- jenifer |  38
- juanita |  58
- susan   |  78
- zena    |  98
- martie  |  88
- chris   |  78
- pat     |  18
- zola    |  58
- louise  |  98
- edna    |  18
- bertha  |  88
- sumi    |  38
- koko    |  88
- gina    |  18
- rean    |  48
- sharon  |  78
- paula   |  68
- julie   |  68
- belinda |  38
- karen   |  48
- carina  |  58
- diane   |  18
- esther  |  98
- trudy   |  88
- fanny   |   8
- carmen  |  78
- lita    |  25
- pamela  |  48
- sandy   |  38
- trisha  |  88
- uma     |  78
- velma   |  68
- sharon  |  25
- sam     |  30
- bill    |  20
- fred    |  28
- larry   |  60
- jeff    |  23
- cim     |  30
- linda   |  19
-(58 rows)
-
+ERROR:  relation "public.person" does not exist
 --
 -- awk '{print $1,$2;}' person.data |
 -- awk '{if(NF!=2){print $3,$2;}else{print;}}' - emp.data |
@@ -370,100 +309,22 @@
 -- sort +1nr -2
 --
 SELECT p.name, p.age FROM person* p ORDER BY age DESC, name;
-  name   | age 
----------+-----
- esther  |  98
- louise  |  98
- zena    |  98
- bertha  |  88
- koko    |  88
- martie  |  88
- sarah   |  88
- trisha  |  88
- trudy   |  88
- carmen  |  78
- chris   |  78
- sharon  |  78
- susan   |  78
- uma     |  78
- wendy   |  78
- julie   |  68
- leah    |  68
- paula   |  68
- velma   |  68
- larry   |  60
- carina  |  58
- jane    |  58
- juanita |  58
- zola    |  58
- sue     |  50
- karen   |  48
- pamela  |  48
- rean    |  48
- mike    |  40
- belinda |  38
- jenifer |  38
- liza    |  38
- sandy   |  38
- sumi    |  38
- teresa  |  38
- sally   |  34
- alex    |  30
- cim     |  30
- sam     |  30
- fred    |  28
- jean    |  28
- melissa |  28
- nan     |  28
- lita    |  25
- sharon  |  25
- denise  |  24
- jeff    |  23
- bill    |  20
- joe     |  20
- linda   |  19
- sandra  |  19
- diane   |  18
- edna    |  18
- gina    |  18
- joan    |  18
- pat     |  18
- fanny   |   8
- mary    |   8
-(58 rows)
-
+ERROR:  relation "public.person" does not exist
 --
 -- Test some cases involving whole-row Var referencing a subquery
 --
 select foo from (select 1 offset 0) as foo;
- foo 
------
- (1)
-(1 row)
-
+ERROR:  column "foo" not exist
 select foo from (select null offset 0) as foo;
- foo 
------
- ()
-(1 row)
-
+ERROR:  column "foo" not exist
 select foo from (select 'xyzzy',1,null offset 0) as foo;
-    foo     
-------------
- (xyzzy,1,)
-(1 row)
-
+ERROR:  column "foo" not exist
 --
 -- Test VALUES lists
 --
 select * from onek, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
     WHERE onek.unique1 = v.i and onek.stringu1 = v.j;
- unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 |  i  |   j    
----------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------+-----+--------
-     147 |       0 |   1 |    3 |   7 |      7 |       7 |       47 |         147 |       147 |      147 |  14 |   15 | RFAAAA   | AAAAAA   | AAAAxx  | 147 | RFAAAA
-     931 |       1 |   1 |    3 |   1 |     11 |       1 |       31 |         131 |       431 |      931 |   2 |    3 | VJAAAA   | BAAAAA   | HHHHxx  | 931 | VJAAAA
-(2 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- a more complex case
 -- looks like we're coding lisp :-)
 select * from onek,
@@ -471,49 +332,21 @@
     (values(10000), (2), (389), (1000), (2000), ((select 10029))) as foo(i)
     order by i asc limit 1))) bar (i)
   where onek.unique1 = bar.i;
- unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 | i 
----------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------+---
-       2 |     326 |   0 |    2 |   2 |      2 |       2 |        2 |           2 |         2 |        2 |   4 |    5 | CAAAAA   | OMAAAA   | OOOOxx  | 2
-(1 row)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- try VALUES in a subquery
 select * from onek
     where (unique1,ten) in (values (1,1), (20,0), (99,9), (17,99))
     order by unique1;
- unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
----------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
-       1 |     214 |   1 |    1 |   1 |      1 |       1 |        1 |           1 |         1 |        1 |   2 |    3 | BAAAAA   | GIAAAA   | OOOOxx
-      20 |     306 |   0 |    0 |   0 |      0 |       0 |       20 |          20 |        20 |       20 |   0 |    1 | UAAAAA   | ULAAAA   | OOOOxx
-      99 |     101 |   1 |    3 |   9 |     19 |       9 |       99 |          99 |        99 |       99 |  18 |   19 | VDAAAA   | XDAAAA   | HHHHxx
-(3 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- VALUES is also legal as a standalone query or a set-operation member
 VALUES (1,2), (3,4+4), (7,77.7);
- column1 | column2 
----------+---------
-       1 |       2
-       3 |       8
-       7 |    77.7
-(3 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 VALUES (1,2), (3,4+4), (7,77.7)
 UNION ALL
 SELECT 2+2, 57
 UNION ALL
 TABLE int8_tbl;
-     column1      |      column2      
-------------------+-------------------
-                1 |                 2
-                3 |                 8
-                7 |              77.7
-                4 |                57
-              123 |               456
-              123 |  4567890123456789
- 4567890123456789 |               123
- 4567890123456789 |  4567890123456789
- 4567890123456789 | -4567890123456789
-(9 rows)
-
+ERROR:  clapdb doesn't support [op=SETOP_UNION]
 -- corner case: VALUES with no columns
 CREATE TEMP TABLE nocols();
 --INSERT INTO nocols DEFAULT VALUES;
@@ -585,6 +418,7 @@
 
 -- check if indexscans do the right things
 CREATE INDEX fooi ON foo (f1);
+ERROR:  only support select and create table statement
 --SET enable_sort = false;
 SELECT * FROM foo ORDER BY f1;
  f1 
@@ -635,7 +469,9 @@
 (7 rows)
 
 DROP INDEX fooi;
+ERROR:  only support select and create table statement
 CREATE INDEX fooi ON foo (f1 DESC);
+ERROR:  only support select and create table statement
 SELECT * FROM foo ORDER BY f1;
  f1 
 ----
@@ -685,7 +521,9 @@
 (7 rows)
 
 DROP INDEX fooi;
+ERROR:  only support select and create table statement
 CREATE INDEX fooi ON foo (f1 DESC NULLS LAST);
+ERROR:  only support select and create table statement
 SELECT * FROM foo ORDER BY f1;
  f1 
 ----
@@ -839,51 +677,30 @@
 -- But ORDER BY on a set-valued expression does
 create function sillysrf(int) returns setof int as
   'values (1),(10),(2),($1)' language sql immutable;
+ERROR:  only support select and create table statement
 select sillysrf(42);
- sillysrf 
-----------
-        1
-       10
-        2
-       42
-(4 rows)
-
+ERROR:  function sillysrf does not exist
 select sillysrf(-1) order by 1;
- sillysrf 
-----------
-       -1
-        1
-        2
-       10
-(4 rows)
-
+ERROR:  function sillysrf does not exist
 drop function sillysrf(int);
+ERROR:  only support select and create table statement
 -- X = X isn't a no-op, it's effectively X IS NOT NULL assuming = is strict
 -- (see bug #5084)
 select * from (values (2),(null),(1)) v(k) where k = k order by k;
- k 
----
- 1
- 2
-(2 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 select * from (values (2),(null),(1)) v(k) where k = k;
- k 
----
- 2
- 1
-(2 rows)
-
+ERROR:  clapdb doesn't support select ValueLists
 -- Test partitioned tables with no partitions, which should be handled the
 -- same as the non-inheritance case when expanding its RTE.
 create table list_parted_tbl (a int,b int) partition by list (a);
 create table list_parted_tbl1 partition of list_parted_tbl
   for values in (1) partition by list(b);
---explain (costs off) select * from list_parted_tbl;
---        QUERY PLAN
---------------------------
- Result
-   One-Time Filter: false
+explain (costs off) select * from list_parted_tbl;
+                        QUERY PLAN                        
+----------------------------------------------------------
+ tuple(table_0) = ProjectOnEmptyTable([], [Int32, Int32])
+ return tuple(table_0)
 (2 rows)
 
 drop table list_parted_tbl;
+ERROR:  only support select and create table statement
